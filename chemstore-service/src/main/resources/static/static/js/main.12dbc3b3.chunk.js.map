{"version":3,"sources":["actions/types.js","reducers/errorReducer.js","reducers/securityReducer.js","reducers/setLabDropdownReducer.js","reducers/index.js","reducers/selectedLabReducer.js","store.js","utils/securityUtils.js","components/layout/Header.js","components/chemitem/addUpdate/ChemItemCoreInputFields.js","components/chemitem/addUpdate/AddChemItem.js","components/Landing.js","components/user/AddUser.js","components/login/Login.js","actions/loginActions.js","utils/SecuredRoute.js","components/RedirectFormButton.js","components/UI/DuButtons.js","components/user/User.js","components/user/UserDashboard.js","components/user/ChangePassword.js","components/user/UpdateUser.js","components/NamedEntityCard.js","components/manufacturer/ManufacturerDashboard.js","components/manufacturer/AddManufacturer.js","components/manufacturer/UpdateManufacturer.js","components/chemical/ChemicalCard.js","components/chemical/ChemicalDashboard.js","components/chemical/AddChemical.js","components/chemical/UpdateChemical.js","components/lab/LabCard.js","components/lab/LabDashboard.js","components/lab/AddLab.js","components/lab/UpdateLab.js","utils/durationUtils.js","components/category/CategoryCard.js","components/category/CategoryDashboard.js","components/category/AddCategory.js","components/category/UpdateCategory.js","components/Pagination.js","utils/chem-item-utils.js","components/UI/Modal.js","components/UI/VerifyPanel.js","components/chemitem/ChemItemFirstRow.js","components/chemitem/ChemItemSecondRow.js","components/chemitem/ChemItemThirdRow.js","components/chemitem/ChemItem.js","components/chemitem/ChemItemHeader.js","components/chemitem/ChemItemDashboard.js","components/layout/UserManual.js","components/project/ProjectCard.js","components/project/ProjectDashboard.js","components/project/AddProject.js","components/project/UpdateProject.js","components/recipe/IngredientRow.js","components/recipe/RecipeCard.js","components/recipe/RecipeDashboard.js","components/recipe/IngredientInputRow.js","components/recipe/IngredientInputs.js","components/recipe/RecipeCoreForm.js","components/recipe/AddUpdateRecipe.js","components/mixture/IngredientMixtureTable.js","components/mixture/MixtureCard.js","components/mixture/MixtureHeader.js","components/mixture/MixtureDashboard.js","components/mixture/add/ItemInputRow.js","components/mixture/add/ItemInputsInMixture.js","components/mixture/add/AddUpdateMixture.js","components/chemitem/addUpdate/ChemItemUpdateInputFields.js","components/chemitem/addUpdate/UpdateChemItem.js","App.js","reportWebVitals.js","index.js","components/UI/Modal.module.css"],"names":["GET_ERRORS","SET_CURRENT_USER","SELECT_LAB","FILL_LAB_DROPDOWN","initialState","user","validToken","combineReducers","errors","state","action","type","payload","security","selectedLab","labs","console","log","map","lab","id","value","key","label","name","middleWare","thunk","reactReduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","setJwt","token","axios","defaults","headers","common","checkIfAdmin","labsAsAdmin","labManagers","manager","username","checkIfManager","filter","length","checkIfAccountManager","authorities","listItem","authority","logout","localStorage","removeItem","dispatch","check","checkExpiry","jwtToken","jwt","decodedToken","jwt_decode","currentTime","Date","now","exp","location","replace","refreshState","fetchLabs","a","get","res","data","Header","useSelector","userIsAuth","JSON","stringify","handleLabSelection","justSelected","setItem","split","useEffect","storedLabKeyKey","storedLabKey","getItem","storedLab","userManual","className","to","userISAuthenticated","ButtonGroup","DropdownButton","as","title","style","Dropdown","Item","eventKey","href","textDecoration","onChange","options","placeholder","fullName","tag","Link","onClick","userIsNOTAuthenticated","headerLinks","ChemItemCoreInputFields","props","chemItem","setters","values","history","chemical","manufacturer","unit","batchNumber","quantity","pieces","expirationDateBeforeOpened","arrivalDate","setChemicalShortName","setManufacturerId","setBatchNumber","setQuantity","setUnit","setPieces","setExpirationDateBeforeOpened","setArrivalDate","useState","chemicals","setChemicals","manufacturers","setManufacturers","units","setUnits","then","result","push","htmlFor","disabled","labelField","valueField","searchable","clearable","height","fontSize","items","shortName","searchBy","event","target","AddChemItem","chemicalShortName","manufacturerId","toISOString","setErrors","useHistory","onSubmit","e","preventDefault","newChemItem","labKey","post","catch","error","response","message","Landing","this","Button","variant","Component","connect","AddUser","labsAsUser","roles","onChangeBasicInputs","bind","labsAsUserMultiSelect","React","createRef","labsAsAdminMultiselect","rolesMultiselect","results","setState","newUser","labKeysAsUser","current","getSelectedItems","labKeysAsAdmin","role","classNames","displayValue","onSearch","closeOnSelect","searchBox","ref","showCheckbox","Login","password","loginRequest","login","nextProps","component","otherProps","render","RedirectFormButton","toUrl","objectToPass","formRoute","pathname","buttonLabel","DuButtons","updateDisabled","updateFormTo","size","color","onDelete","User","deleteUser","join","managedLabs","isAccountManager","UserDashboard","users","deleted","confirm","delete","refreshedUsers","userFromList","ChangePassword","oldPassword","newPassword","newPassword2","passwordInput","patch","UpdateUser","persistedUser","match","params","userInput","put","selectedValues","NamedEntityCard","deleteNamedEntity","namedEntity","padding","isAdmin","updateUrl","ManufacturerDashboard","deleteManufacturer","refreshedMf","mfFromList","some","AddManufacturer","newManufacturer","UpdateManufacturer","input","ChemicalCard","deleteChemical","exactName","drawCategory","category","ChemicalDashboard","chemicalsErrorStatus","refreshedChemical","chemicalFromList","loadChemicals","status","getCards","AddChemical","categories","categoryId","handleChange","loadCategories","categoriesErrorStatus","newChemical","chemType","UpdateChemical","updatedChemical","LabCard","deleteLab","LabDashboard","refreshedLabs","labFromList","AddLab","labManagerUsernames","managersOfLabMultiselect","UpdateLab","persistedLab","getShelfLife","days","getDays","shelfLife","Math","round","javaDuration","substring","CategoryCard","deleteCategory","CategoryDashboard","refreshedCts","ctFromList","AddCategory","amount","unitOnChanged","unitOptions","newCategory","UpdateCategory","LEFT_PAGE","RIGHT_PAGE","range","from","step","i","Pagination","fetchPageNumbers","pageNeighbours","max","min","pageLimit","totalPages","ceil","totalRecords","currentPage","totalNumbers","startPage","endPage","pages","hasLeftSpill","hasRightSpill","spillOffset","extraPages","gotoPage","page","onPageChanged","f","paginationData","handleClick","evt","handleMoveLeft","handleMoveRight","index","isAvailable","consumptionDate","isExpired","expDate","expirationDate","expDateBeforeOpened","today","setHours","Backdrop","classes","backdrop","ModalOverlay","modal","content","children","portalElement","document","getElementById","Modal","createPortal","VerifyPanel","onCancel","veryfyMessage","marginRight","ChemItemFirstRow","setActiveModal","getToggleProps","seqNumber","getExpDate","openingDate","class","getOpenContent","getConsumeContent","ChemItemSecondRow","getCollapseProps","arrivedBy","openedBy","ChemItemThirdRow","ChemItem","setChemItem","activeModal","useCollapse","getVerifyMessage","isManager","deleteChemItem","ChemItemHeader","ChemItemDashboard","onlyAvailable","setOnlyAvailable","chemItems","setChemItems","setChemical","setCurrentPage","totalItems","setTotalItems","setTotalPages","setError","toggleOnlyAvailable","originalList","availableString","cehmicalFilter","handleChemicalChange","checked","getChemItemContent","UserManual","ProjectCard","project","deletionConfirmation","setDeletionConfirmation","deleteProject","ProjectDashboard","projects","setProjects","AddProject","setName","newProject","UpdateProject","setProject","IngredientRow","row","ingredient","RecipeCard","recipe","shelfLifeInDays","chemicalIngredients","ing","recipeIngredients","deleteRecipe","RecipeDashboard","useLocation","recipes","setRecipes","selectedProject","setSelectedProject","detail","justAddedRecipe","recipeId","IngredientInputRow","entities","ingredients","setIngredients","handleOnRemove","isLast","updateListItemAttribute","updated","updatedList","item","nr","parseFloat","IngredientInputs","projectId","setChemicalIngredients","setRecipeIngredients","handleChemicalOnRemove","handleRecipeOnRemove","availableChemicals","setAvailableChemicals","availableRecipes","setAvailableRecipes","usedChemicalIds","usedRecipeIds","chemicalIngredient","recipeIngredient","RecipeCoreForm","isUpdate","setAmount","setShelfLifeInDays","AddUpdateRecipe","auLabel","originalRecipe","setOriginalRecipe","ingredientsAreInValid","setIngredientsAreInValid","setJustAddedRecipe","prevSelectedLab","useRef","collectIngredientInputs","ingredientId","parseInt","updadeId","slice","invalidRecipeRows","oldList","sendRequest","recipeInput","sendAndHandleRequest","concat","returnToDashboard","sumbitButton","oldName","createVerifyMessage","width","clear","IngredientMixtureTable","mixture","getRow","chemicalId","identifier","manufacturerName","getChemItemRow","mixtureItem","mixtureItems","mi","getMixtureRow","TableContainer","Paper","Table","sx","minWidth","TableHead","TableRow","TableCell","align","opacity","TableBody","ingredientRow","border","MixtureCard","paddingTop","paddingBottom","paddingRight","paddingLeft","creationDate","creator","deleteMixture","MixtureHeader","MixtureDashboard","mixtures","setMixtures","setPage","queryString","mixtureId","position","bottom","left","paginatioData","ItemInputRow","amountFactor","selectedItems","setSelectedItems","setSpacer","posFromLast","isChemItems","setItems","open","setOpen","newItem","query","fetchChemItems","fetchMixtures","dropDownHeight","onDropdownOpen","onDropdownClose","menuPortal","base","zIndex","toFixed","ItemInputsInMixture","spacer","AddUpdateMixture","originalMixture","setOriginalMixture","setRecipe","setCreationDate","setMixtureItems","changeCraetionDate","setChangeCraetionDate","justAddedMixture","setJustAddedMixture","initialChemItems","forEach","initialMixtureItems","mixtureInput","chemItemIds","Object","mixtureItemIds","recipeFromList","changeRecipe","getCreatedDateInputContent","ChemItemUpdateInputFields","updateSetters","updateValues","consumedBy","setArrivedBy","setOpeningDate","setOpenedBy","setConsumptionDate","setConsumedBy","setUsers","getOpeningDateInput","getConsumedByInput","getConsumtionDateInput","UpdateChemItem","chemItemId","updatedChemItem","setUpdatedChemItem","arrivedByUsername","openedByUsername","consumedByUsername","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.12dbc3b3.chunk.js","sourcesContent":["export const GET_ERRORS = 'GET_ERRORS'\n\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER'\n\nexport const SELECT_LAB = 'SELECT_LAB'\n\nexport const FILL_LAB_DROPDOWN = 'FILL_LAB_DROPDOWN'\n","import { GET_ERRORS } from \"../actions/types\";\n\nconst initialState = {}\n\nexport default function errorReducer(state=initialState, action) {\n    switch(action.type) {\n        case GET_ERRORS:\n            return action.payload\n        default:\n            return state\n    }\n}","import { SET_CURRENT_USER } from \"../actions/types\";\n\nconst initialState = {\n    user: {},\n    validToken: false\n}\n\nexport default function securityReducer(state = initialState, action) {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                validToken: action.payload ? true : false,\n                user: action.payload\n            }\n        default: \n            return state\n    }\n}","import { FILL_LAB_DROPDOWN } from \"../actions/types\";\n\nconst initialState = []\n\nexport default function selectedLabReducer(state = initialState, action) {\n    switch (action.type) {\n        case FILL_LAB_DROPDOWN:\n            console.log(\"state in selectedLabReducer: \" + state)\n            return action.payload.map(lab => {return {...lab, id: lab.id, value: lab.key, label: lab.name}})\n            \n            \n        default: \n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport errorReducer from './errorReducer'\nimport securityReducer from './securityReducer'\nimport selectedLabReducer from './selectedLabReducer'\nimport setLabDropdownReducer from './setLabDropdownReducer'\n\nexport default combineReducers ({\n    errors: errorReducer,\n    security: securityReducer,\n    selectedLab: selectedLabReducer,\n    labs: setLabDropdownReducer\n})","import { SELECT_LAB } from \"../actions/types\";\n\nconst initialState = \"\"\n\nexport default function selectedLabReducer(state = initialState, action) {\n    switch (action.type) {\n        case SELECT_LAB:\n            return  action.payload\n        default: \n            return state\n    }\n}","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\nconst initialState = {}\nconst middleWare = [thunk]\n\nlet store\n\nconst reactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n\nif (window.navigator.userAgent.includes(\"Chrome\") && reactReduxDevTools) {\n    store = createStore(\n        rootReducer, \n        initialState, \n        compose(applyMiddleware(...middleWare),\n        reactReduxDevTools))\n} else {\n    store = createStore(\n        rootReducer, \n        initialState, \n        compose(applyMiddleware(...middleWare)))\n\n}\n\nexport default store","import axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport store from '../store';\nimport { FILL_LAB_DROPDOWN, SET_CURRENT_USER } from \"../actions/types\";\n\n//TODO rename to 'setTokenToHeader\nexport const setJwt = token => {\n    if (token) {\n        axios.defaults.headers.common[\"Authorization\"] = token;\n    } else {\n        delete axios.defaults.headers.common[\"Authorization\"];\n    }\n}\n\nexport const checkIfAdmin = (selectedLab, user) => {\n  return (selectedLab.key) && \n                  (user.labsAsAdmin.includes(selectedLab.value) || \n                  selectedLab.labManagers.map(manager => manager.username).includes(user.username))\n}\n\n\nexport const checkIfManager = (selectedLab, user) => {\n  return  selectedLab.key && user && selectedLab.labManagers.filter(manager => manager.username === user.username).length > 0\n}\n\n\nexport const checkIfAccountManager = (user) => {\n  return user.username && user.authorities.map(listItem => listItem.authority).includes(\"ACCOUNT_MANAGER\")\n}\n\nexport const logoutDispatch = () => dispatch => {\n    localStorage.removeItem(\"jwt\");\n    setJwt(false);\n    dispatch({\n        type: SET_CURRENT_USER,\n        payload: {}\n    });\n}\n\n\nexport const logout = () => {\n    localStorage.removeItem(\"jwt\");\n    localStorage.removeItem(\"selectedLab\");\n    setJwt(false);\n    store.dispatch({\n        type: SET_CURRENT_USER,\n        payload: {}\n    });\n}\n\nexport const check = () => {\n  checkExpiry()\n}\n\nconst checkExpiry = () => {\n    const jwtToken = localStorage.jwt;\n    if (jwtToken) {\n      const decodedToken = jwt_decode(jwtToken);\n      const currentTime = Date.now()/1000;\n      if (decodedToken.exp < currentTime) {\n        console.log(\"token expired\");  \n        logout();\n        window.location.replace(\"/\");\n      } \n    }\n}\n\nexport const refreshState = () => {\n    const jwtToken = localStorage.jwt;\n    if (jwtToken) {\n      const decodedToken = jwt_decode(jwtToken);\n      const currentTime = Date.now()/1000;\n      if (decodedToken.exp < currentTime) {\n        console.log(\"token expired\");  \n        logout();\n        window.location.replace(\"/\");\n      } else {\n        setJwt(jwtToken);\n        store.dispatch({\n            type: SET_CURRENT_USER,\n            payload: decodedToken\n        });\n        fetchLabs()\n      }\n    }\n}\n\nexport const fetchLabs = async () => {\n  try {\n    const res = await axios.get('/api/logged-in/lab?onlyAvailable=true')\n    store.dispatch({\n        type: FILL_LAB_DROPDOWN,\n        payload: res.data\n    });\n  } catch (error) {\n    console.log(error)\n  }\n\n}\n\n\n","import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport { logout, } from '../../utils/securityUtils'\nimport 'semantic-ui-css/semantic.min.css'\nimport Select from 'react-select'\nimport store from '../../store'\nimport { SELECT_LAB } from '../../actions/types'\nimport { ButtonGroup, Dropdown, DropdownButton } from 'react-bootstrap'\n\n\nconst Header = () => {\n    const security = useSelector((state) => state.security)\n    const labs = useSelector((state) => state.labs)\n    const selectedLab = useSelector((state) => state.selectedLab)\n\n    const { user } = security;\n    const userIsAuth = user && JSON.stringify(user) !== '{}'\n\n\n    const handleLabSelection = justSelected => {\n        localStorage.setItem(`${user.username.split('@')[0]}.selectedLab`, justSelected.key)\n        store.dispatch({\n            type: SELECT_LAB,\n            payload: justSelected\n        });\n    }\n\n    useEffect(() => {\n        if (userIsAuth && labs.length > 0) {\n            const storedLabKeyKey = `${user.username.split('@')[0]}.selectedLab`\n            const storedLabKey = localStorage.getItem(storedLabKeyKey)\n            if (storedLabKey) {\n                const storedLab = labs.filter(lab => lab.key === storedLabKey)[0]\n                handleLabSelection(storedLab)\n            }\n            else if (labs.length === 1) {\n                handleLabSelection(labs[0])\n            } \n        }\n        \n    }, [labs, security])\n\n\n    const handleLogout = () => {\n        logout()\n        window.location.href = '/'\n    }\n\n\n\n\n    const userManual = (\n        <li className=\"nav-item\">\n            <Link to='/user-manual' className=\"nav-link\" >\n                <i className=\"fas fa-question-circle\"></i>\n            </Link>\n\n        </li>)\n    \n    const userISAuthenticated = (                    \n        <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n            <ul className=\"navbar-nav mr-auto\">\n\n                <ButtonGroup >\n                    <DropdownButton as={ButtonGroup} title={<i style={{\"color\": \"#88b7fc\"}} className=\"fas\">Account</i>} id=\"bg-nested-dropdown\">\n                        <Dropdown.Item eventKey=\"1\" href='/users' style={{ textDecoration: 'none' }}>\n                            Users\n                        </Dropdown.Item>\n                        <Dropdown.Item eventKey=\"1\" href='/labs' style={{ textDecoration: 'none' }}>\n                            Labs\n                        </Dropdown.Item>\n                        <Dropdown.Item eventKey=\"1\" href='/manufacturers' style={{ textDecoration: 'none' }}>\n                            Manufacturers\n                        </Dropdown.Item>\n                    </DropdownButton>\n                </ButtonGroup>\n\n                <ButtonGroup >\n                    <DropdownButton as={ButtonGroup} title={<i style={{\"color\": \"#88b7fc\"}} className=\"fas\">Lab</i>} id=\"bg-nested-dropdown\">\n                        <Dropdown.Item eventKey=\"1\" href='/categories' style={{ textDecoration: 'none' }}>\n                            Categories\n                        </Dropdown.Item>\n                        <Dropdown.Item eventKey=\"1\" href='/chemicals' style={{ textDecoration: 'none' }}>\n                            Chemicals\n                        </Dropdown.Item>\n                        <Dropdown.Item eventKey=\"1\" href='/projects' style={{ textDecoration: 'none' }}>\n                            Projects\n                        </Dropdown.Item>\n                        <Dropdown.Item eventKey=\"1\" href='/recipes' style={{ textDecoration: 'none' }}>\n                            Recipes\n                        </Dropdown.Item>\n                    </DropdownButton>\n                </ButtonGroup>\n\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/chem-items\">\n                        Chem items\n                    </Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/mixtures\">\n                        Mixtures\n                    </Link>\n                </li>\n\n            </ul>\n\n            <ul className=\"navbar-nav ms-auto\">\n                <li className=\"nav-item\" key=\"react-select\">\n                    <Select \n                        name=\"form-field-name\"\n                        value={selectedLab}\n                        onChange={handleLabSelection}\n                        options={labs} \n                        placeholder=\"Select lab\"\n\n                    />\n                </li>\n                <li className=\"nav-item\">\n                    <ButtonGroup style={{\"paddingLeft\": \"10px\", \"paddingRight\": \"10px\"}}>\n                        <DropdownButton as={ButtonGroup} title={<i style={{\"color\": \"#dddddd\"}} className=\"fas fa-user\">{user.fullName}</i>} id=\"bg-nested-dropdown\">\n                            <Dropdown.Item eventKey=\"1\" href='/change-password' style={{ textDecoration: 'none' }}>\n                                Change Password\n                            </Dropdown.Item>\n                            <Dropdown.Item eventKey=\"2\" tag={Link} to=\"/\" onClick={handleLogout} style={{ textDecoration: 'none' }}>\n                                Logout\n                            </Dropdown.Item>\n                        </DropdownButton>\n                    </ButtonGroup>\n                </li>\n                {userManual}\n            </ul>\n        </div>\n    )\n    const userIsNOTAuthenticated = (\n        <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n            <ul className=\"navbar-nav ms-auto\">\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to='/login'>\n                        Login\n                    </Link>\n                </li>\n                {userManual}\n            </ul>\n        </div>\n    )\n\n    let headerLinks = userIsAuth ? userISAuthenticated : userIsNOTAuthenticated;\n\n    return (\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\n            <div className=\"container\">\n                <Link className=\"navbar-brand\" to=\"/\">\n                    chemstore\n                </Link>\n                {\n                    headerLinks\n                }\n            </div>\n        </nav>\n    )\n    \n}\n\nexport default Header\n","import axios from \"axios\"\nimport { useEffect, useState } from \"react\"\nimport Select from \"react-dropdown-select\"\nimport { useSelector } from \"react-redux\"\nimport { checkIfAdmin } from \"../../../utils/securityUtils\"\n\nconst ChemItemCoreInputFields = props => {\n    const { chemItem, selectedLab, setters, values, history } = props\n    const { chemical, manufacturer, unit, batchNumber, quantity, pieces, expirationDateBeforeOpened, arrivalDate } = values\n    const { setChemicalShortName, setManufacturerId, setBatchNumber, setQuantity, setUnit, setPieces, setExpirationDateBeforeOpened, setArrivalDate} = setters\n    \n    const user = useSelector((state) => state.security.user)\n\n    const [ chemicals, setChemicals ] = useState([]) \n    const [ manufacturers, setManufacturers ] = useState([]) \n    const [ units, setUnits ] = useState([]) \n\n\n    useEffect(() => {\n        axios.get(`/api/logged-in/chemical/${selectedLab.key}`)\n            .then(result => setChemicals(result.data))\n        axios.get(`/api/logged-in/manufacturer`)\n            .then(result => setManufacturers(result.data))\n        axios.get(`/api/chem-item/unit`)\n            .then(result => setUnits(result.data.map(unit => {return {\"unit\": unit}})))\n\n    }, [])\n    \n    useEffect(() => {\n        if (selectedLab && user && !checkIfAdmin(selectedLab, user)) {\n            history.push(\"/chem-items\")\n        } \n    }, [selectedLab, user])\n\n    return(\n        <div>\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"chemical\" className=\"col-sm-4 col-form-label\">chemical</label>\n                <div className=\"col-sm-8\">\n                    <Select\n                        options={chemicals}\n                        values={chemical ? [ chemical ] : []}\n                        disabled={chemItem}\n                        labelField=\"shortName\"\n                        valueField=\"shortName\"\n                        placeholder=\"chemical\"\n                        searchable={false}\n                        clearable={false}\n                        style={{height: \"42px\", fontSize: \"16px\"}}\n                        onChange={(items) => items[0] && setChemicalShortName(items[0].shortName)}\n                    />\n                </div>\n            </div>\n\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"manufacturer\" className=\"col-sm-4 col-form\">manufacturer</label>\n                <div className=\"col-sm-8\">\n                    <Select\n                        options={manufacturers}\n                        values={manufacturer ? [ manufacturer ] : []}\n                        searchable={false}\n                        clearable={false}\n                        labelField=\"name\"\n                        valueField=\"name\"\n                        placeholder=\"manufacturer\"\n                        searchBy=\"name\"\n                        style={{height: \"42px\", fontSize: \"16px\"}}\n                        onChange={(items) => items[0] && setManufacturerId(items[0].id )}\n                    />\n                </div>\n            </div>\n\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"batchNumber\" className=\"col-sm-4 col-form-label\">batch number</label>\n                <div className=\"col-sm-8\">\n                    <input \n                        name=\"batchNumber\" \n                        value={batchNumber}\n                        onChange={event => setBatchNumber(event.target.value)}\n                        type=\"text\" \n                        className=\"form-control form-control-lg \" \n                        placeholder=\"batch number\" />\n                </div>\n            </div>\n\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"quantity\" className=\"col-sm-4 col-form-label\">quantity</label>\n                <div className=\"col-sm-8\">\n                    <input \n                        name=\"quantity\" \n                        value={quantity}\n                        onChange={event => setQuantity(event.target.value)}\n                        type=\"text\" \n                        className=\"form-control form-control-lg \" \n                        placeholder=\"quantity\" />\n                </div>\n            </div>\n\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"unit\" className=\"col-sm-4 col-form-label\">unit</label>\n                <div className=\"col-sm-8\">\n                    <Select\n                        options={units}\n                        values={unit ? [ unit ] : []}\n                        labelField=\"unit\"\n                        placeholder=\"unit\"\n                        valueField=\"unit\"\n                        searchable={false}\n                        clearable={false}\n                        style={{height: \"42px\", fontSize: \"16px\"}}\n                        onChange={items => items[0] && setUnit(items[0].unit)}\n                    />\n                </div>\n            </div>\n\n            \n            {!chemItem && \n                (<div className=\"form-group row mb-3\">\n                    <label htmlFor=\"amount\" className=\"col-sm-4 col-form-label\">pieces</label>\n                    <div className=\"col-sm-8\">\n                            <input \n                                name=\"pieces\" \n                                value={pieces}\n                                onChange={event => setPieces(event.target.value)}\n                                type=\"text\" \n                                className=\"form-control form-control-lg \" \n                                placeholder=\"pieces\" />\n                            \n                        \n                    </div>\n                </div>)}\n            \n            \n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"expirationDateBeforeOpened\" className=\"col-sm-4 col-form-label\">Expiration date (before opened)</label>\n                <div className=\"col-sm-8\">\n                    <input \n                        name=\"expirationDateBeforeOpened\" \n                        value={expirationDateBeforeOpened}\n                        onChange={event => setExpirationDateBeforeOpened(event.target.value)}\n                        type=\"date\" \n                        className=\"form-control form-control-lg \" \n                        />\n                </div>\n            </div>\n\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"arrivalDate\" className=\"col-sm-4 col-form-label\">Arrival date</label>\n                <div className=\"col-sm-8\">\n                    <input \n                        name=\"arrivalDate\" \n                        value={arrivalDate}\n                        onChange={event => setArrivalDate(event.target.value)}\n                        type=\"date\" \n                        className=\"form-control form-control-lg \" \n                        />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ChemItemCoreInputFields","import React, { useEffect, useState } from 'react'\nimport { check } from '../../../utils/securityUtils'\nimport axios from 'axios'\nimport { useHistory } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport ChemItemCoreInputFields from './ChemItemCoreInputFields'\n\nconst AddChemItem = () => {\n    const [ chemicalShortName, setChemicalShortName ] = useState(\"\") \n    const [ manufacturerId, setManufacturerId ] = useState(\"\") \n    const [ unit, setUnit ] = useState(\"\") \n    const [ pieces, setPieces ] = useState(1) \n    const [ quantity, setQuantity ] = useState(0) \n    const [ batchNumber, setBatchNumber ] = useState(\"\") \n    const [ expirationDateBeforeOpened, setExpirationDateBeforeOpened ] = useState(\"\") \n    const [ arrivalDate, setArrivalDate ] = useState(new Date().toISOString().split('T')[0]) \n    const [ errors, setErrors ] = useState(\"\") \n\n    const selectedLab = useSelector(state => state.selectedLab)\n    const history = useHistory()\n    \n\n    useEffect(() => {\n        check()\n    })\n\n    const onSubmit = async e => {\n        check()\n        e.preventDefault()\n        const newChemItem = {\n            labKey: selectedLab.key,\n            chemicalShortName: chemicalShortName,\n            manufacturerId: manufacturerId,\n            unit: unit,\n            pieces: pieces,\n            quantity: quantity,\n            batchNumber: batchNumber,\n            expirationDateBeforeOpened: expirationDateBeforeOpened,\n            arrivalDate: arrivalDate\n        }\n        await axios.post(`/api/chem-item`, newChemItem)\n            .then(() =>  history.push('/chem-items'))\n            .catch(error => setErrors(error.response.data))   \n    }\n\n    const setters = {\n        setChemicalShortName: setChemicalShortName,\n        setManufacturerId: setManufacturerId,\n        setBatchNumber: setBatchNumber,\n        setQuantity: setQuantity,\n        setUnit: setUnit,\n        setPieces: setPieces,\n        setExpirationDateBeforeOpened: setExpirationDateBeforeOpened,\n        setArrivalDate: setArrivalDate\n    }\n\n    const values = {\n        batchNumber: batchNumber,\n        quantity: quantity,\n        pieces: pieces,\n        expirationDateBeforeOpened: expirationDateBeforeOpened,\n        arrivalDate: arrivalDate,\n    }\n\n    return (\n        <div className=\"col-md-8 m-auto\">\n            <h5 className=\"display-4 text-center\">{`Register chemical into ${selectedLab.name}`}</h5>\n            <hr />\n            <br/>   \n            {\n                (errors.message && <h5 className=\"text-danger\">{errors.message}</h5>)\n            }\n            <form onSubmit={onSubmit}>\n                <ChemItemCoreInputFields\n                    selectedLab={selectedLab}\n                    setters={setters}\n                    values={values}\n                    history={history}\n                />\n\n                <button type=\"submit\" className=\"btn btn-primary btn-block mt-4\">Register</button>\n            </form>\n        </div>\n    )\n    \n}\n\nexport default AddChemItem\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport PropTypes from \"prop-types\"\nimport { fetchLabs } from '../utils/securityUtils'\nimport { Button } from 'react-bootstrap'\nimport \"./Landing.css\"\n\nclass Landing extends Component {\n    componentDidMount() {\n        const user = this.props.security.user\n        if (user && JSON.stringify(user) !== '{}') {\n            fetchLabs()\n            this.props.history.push('/chem-items')\n        }\n    }\n    render() {\n        return (\n            <div className=\"landing\">\n                <div className=\"light-overlay landing-inner text-dark\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12 text-center\">\n                                <h1 className=\"display-3 mb-4\">chemstore</h1>\n                                <p className=\"lead\">\n                                    If you are tired of administrating chemicals and eluents on paper\n                                </p>\n                                <br/>\n                                <p className=\"lead\">\n                                    <b>Log in</b>, to manage chamicals and register eluents in your lab\n                                </p>\n                                <hr />\n                                <Link to=\"/login\" className=\"lgbtn btn btn-primary mt-2\">\n                                    Login\n                                </Link>\n                                <Link to=\"/user-manual\">\n                                    <Button variant=\"outline-primary\" className=\"lgbtn btn-block mt-2\">\n                                        <i className=\"fas fa-question-circle\"></i>\n                                        Help\n                                    </Button>\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nLanding.propTypes = {\n    security: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    security: state.security\n})\n\nexport default connect(mapStateToProps) (Landing)\n","import Multiselect from 'multiselect-react-dropdown'\nimport React, { Component } from 'react'\nimport classNames from \"classnames\";\nimport axios from \"axios\";\nimport { check, checkIfAccountManager } from '../../utils/securityUtils'\nimport { connect } from 'react-redux';\n\n\nclass AddUser extends Component {\n    constructor() {\n        super()\n        this.state = {\n            username: \"\",\n            fullName: \"\",\n            labsAsUser: [], \n            labsAsAdmin: [],\n            roles: [],\n            labs: [],\n            errors: {}\n        }\n        this.onChangeBasicInputs=this.onChangeBasicInputs.bind(this)\n        this.labsAsUserMultiSelect = React.createRef();\n        this.labsAsAdminMultiselect = React.createRef();\n        this.rolesMultiselect = React.createRef();\n        this.onSubmit=this.onSubmit.bind(this)\n    }\n\n    componentDidMount() {\n        check()\n        if (!checkIfAccountManager(this.props.user)) {\n            this.props.history.push(\"/users\")\n        } else {\n            axios.get('/api/logged-in/lab')\n                .then((results) => this.setState({ labs: results.data }))\n                .catch(error => this.props.history.push(\"/users\"))\n            axios.get('/api/logged-in/role')\n                .then((results) => this.setState({ roles: results.data }))\n                .catch(error => this.props.history.push(\"/users\"))\n        }\n\n    }\n\n\n    onChangeBasicInputs(e) {\n        check()\n        this.setState({ [e.target.name]: e.target.value})\n    }\n\n    async onSubmit(e) {\n        e.preventDefault()\n        const newUser = {\n            username: this.state.username,\n            fullName: this.state.fullName,\n            labKeysAsUser: this.labsAsUserMultiSelect.current.getSelectedItems().map(lab => lab.key), \n            labKeysAsAdmin: this.labsAsAdminMultiselect.current.getSelectedItems().map(lab => lab.key),\n            roles: this.rolesMultiselect.current.getSelectedItems().map(role => role.key)\n        }\n        try {\n            await axios.post('/api/account/user', newUser)\n            this.props.history.push(\"/users\")\n        } catch (error) {\n            this.setState({errors: error.response.data})\n        }\n    }\n\n\n    render() {\n        const {errors} = this.state\n        return (\n            <div className=\"register\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                    \n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Register</h1>\n                            <p className=\"lead text-center\">Add new user</p>\n                            {\n                                (errors.message && <h5 className=\"invalid-input\">{errors.message}</h5>)\n                            }\n                            {\n                                (errors.message && \n                                <div className=\"form-group row mb-3 invalid-feedback\">\n                                    {errors.message}\n                                </div>)\n                            }\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"username\" className=\"col-sm-4 col-form-label\">username</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"username\"\n                                            value={this.state.username}\n                                            onChange={this.onChangeBasicInputs}\n                                            type=\"email\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.username})} \n                                            placeholder=\"username (email)\" \n                                        />\n                                        {\n                                            (errors.username && <div className=\"invalid-feedback\">{errors.username}</div>)\n                                        }\n                                       \n                                    </div>\n                                </div>\n                                      \n                                \n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"fullName\" className=\"col-sm-4 col-form-label\">Full name</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"fullName\"\n                                            value={this.state.fullName}\n                                            onChange={this.onChangeBasicInputs}\n                                            type=\"text\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.fullName})} \n                                            placeholder=\"full name\"  \n                                        />\n                                    {errors.fullName && (\n                                        <div className=\"invalid-feedback\">{errors.fullName}</div>\n                                    )}\n                                    </div>\n\n                                </div>\n\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"labsAsUser\" className=\"col-sm-4 col-form-label\">Labs, where user can administrate (open, use, etc) chemicals</label>\n                                    <div className=\"col-sm-8\">\n                                        <Multiselect\n                                            displayValue=\"name\"\n                                            placeholder='labs as user'\n                                            onSearch={function noRefCheck(){}}\n                                            closeOnSelect={false}\n                                            style={{searchBox: {\"fontSize\": \"16px\"}}}\n                                            options={this.state.labs}\n                                            ref={this.labsAsUserMultiSelect}\n                                            showCheckbox\n                                            />\n                                        </div>\n                                </div>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"labsAsAdmin\" className=\"col-sm-4 col-form-label\">Labs, where user is administrator</label>\n                                    <div className=\"col-sm-8\">\n                                        <Multiselect\n                                            displayValue=\"name\"\n                                            placeholder='admin in labs'\n                                            onSearch={function noRefCheck(){}}\n                                            closeOnSelect={false}\n                                            style={{searchBox: {\"fontSize\": \"16px\"}}}\n                                            options={this.state.labs}\n                                            ref={this.labsAsAdminMultiselect}\n                                            showCheckbox\n                                        />\n                                        </div>\n                                </div>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"roles\" className=\"col-sm-4 col-form-label\">Additional roles</label>\n                                    <div className=\"col-sm-8\">\n                                        <Multiselect\n                                            displayValue=\"name\"\n                                            placeholder='roles'\n                                            onSearch={function noRefCheck(){}}\n                                            closeOnSelect={false}\n                                            style={{searchBox: {\"fontSize\": \"16px\"}}}\n                                            options={this.state.roles}\n                                            ref={this.rolesMultiselect}\n                                            showCheckbox\n                                        />\n                                    </div>\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Add User</button>\n                                \n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    user: state.security.user\n})\n\nexport default connect(mapStateToProps) (AddUser)\n","import React, { Component } from 'react'\nimport PropTypes from \"prop-types\"\nimport { connect } from \"react-redux\"\nimport classNames from 'classnames'\nimport { login } from '../../actions/loginActions'\nimport \"./Login.css\"\n\n\n\nclass Login extends Component {\n    constructor() {\n        super()\n        this.state = {\n            username: \"\",\n            password: \"\",\n            errors: {}\n        }\n        this.onChange=this.onChange.bind(this)\n        this.onSubmit=this.onSubmit.bind(this)\n    }\n    onChange(event) {\n        this.setState({[event.target.name]: event.target.value})\n    }\n    onSubmit(event) {\n        event.preventDefault()\n        const loginRequest = {\n            username: this.state.username,\n            password: this.state.password\n        }\n        this.props.login(loginRequest, this.props.history)\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setState({errors: nextProps.errors});\n    }\n\n    render() {\n        const {errors} = this.state\n        return (\n            <div className=\"login\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Log In</h1>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group mb-3\">\n                                    <input \n                                        name=\"username\" \n                                        value={this.state.username}\n                                        onChange={this.onChange}\n                                        type=\"text\" \n                                        className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.username})}\n                                        placeholder=\"Email Address\" \n                                    />\n                                    {\n                                        errors.username && <div className=\"invalid-feedback\">{errors.username}</div>\n                                    }\n                                </div>\n                                <div className=\"form-group mb-3\">\n                                    <input \n                                        name=\"password\"\n                                        value={this.state.password}\n                                        onChange={this.onChange}\n                                        type=\"password\" \n                                        className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.password})}\n                                        placeholder=\"Password\" \n                                     />\n                                    {\n                                        errors.username && <div className=\"invalid-feedback\">{errors.password}</div>\n                                    }\n                                </div>\n                                \n                                <input type=\"submit\" className=\"lgbtn btn btn-info btn-block mt-4\" />\n                                \n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nLogin.propTypes = {\n    login: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security: PropTypes.object.isRequired\n}\n\nconst mapSateToProps = state => ({\n    security: state.security,\n    errors: state.errors\n})\n\nexport default connect(mapSateToProps, {login}) (Login) \n","import axios from \"axios\";\nimport { GET_ERRORS } from \"./types\";\nimport { refreshState, fetchLabs } from \"../utils/securityUtils\";\n\n\nexport const login = (loginRequest, history) => async dispatch => {\n    try {\n        const res = await axios.post('/api/login', loginRequest)\n        const { token } = res.data\n        localStorage.setItem(\"jwt\", token)  \n        refreshState();\n        fetchLabs();\n        history.push(\"/chem-items\")\n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        });   \n    }\n}","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\n\nconst SecuredRoute = ( {component: Component, security, ...otherProps}) => (\n    <Route \n        {...otherProps} render =  {props => security.validToken ? (<Component {...props}/>) : (<Redirect to=\"login\"/>)} \n    />\n);\n\nSecuredRoute.propTypes = {\n    security: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state =>({\n    security: state.security\n})\n\nexport default connect (mapStateToProps)(SecuredRoute);\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction RedirectFormButton(props) {\n    const toUrl = props.objectToPass ? props.objectToPass.formRoute : props.formRoute\n    return (\n        <Link to={{pathname: toUrl, state: props.objectToPass}} className=\"btn btn-lg btn-info\">\n            {props.buttonLabel}\n        </Link>\n    )\n}\n\nexport default RedirectFormButton\n","import { Button } from \"@mui/material\"\nimport { Link } from \"react-router-dom\"\nimport { check } from \"../../utils/securityUtils\"\nimport \"./DuButtons.css\"\n\nconst DuButtons = props => {\n\n    const checkAndDelete = () => {\n        check()\n        props.onDelete()\n    }\n    return (\n        <div id=\"button-group\">\n            <Link className={`${props.updateDisabled && \"disabled-link\"}`} to={props.updateFormTo} disabled={true} onClick={check}>\n                <Button className=\"btn\" variant=\"outlined\" size=\"small\" disabled={props.updateDisabled}>\n                    <i className=\"fa fa-edit\">Update</i>\n                </Button>\n            </Link>\n            \n            <Button className=\"btn\" color=\"error\" variant=\"outlined\" size=\"small\" onClick={checkAndDelete}  >\n                <i className=\"fa fa-minus-circle\">Delete</i>\n            </Button>\n        </div>\n    )\n}\n\nexport default DuButtons","import React, { Component } from 'react'\nimport DuButtons from '../UI/DuButtons';\n\nclass User extends Component {\n    constructor(props) {\n        super()\n        this.deleteUser=props.deleteUser\n    }\n\n    render() {\n        const {user} = this.props\n        return (\n            <div className=\"container\">\n                <div className=\"card card-body bg-light mb-3\">\n                    <div className=\"row\">\n                        <div className=\"col-3\">\n                            <span className=\"mx-auto\">{user.username}</span>          \n                                 { user.roles.length > 0 && (<div>\n                                        <br />\n                                        <span className=\"mx-auto\">({user.roles.map(role => role.name).join(\",\")})</span>\n                                    </div>)\n                                 }\n                        </div>\n                        <div className=\"col-lg-6\">\n                            <h3>{user.fullName}</h3>\n                            <i>User in:  </i><strong>{user.labsAsUser.map(lab => lab.name).join(\", \")}</strong><br />\n                            { user.labsAsAdmin.length > 0 && (\n                                <div>\n                                    <i>Admin in:   </i><strong>{user.labsAsAdmin.map(lab => lab.name).join(\",\")}</strong><br />\n                                </div>)\n                            }\n                            { user.managedLabs.length > 0 && (\n                                <div>\n                                    <i>Managed labs:   </i><strong>{user.managedLabs.map(lab => lab.name).join(\",\")}</strong><br />\n                                </div>)\n                            }\n\n                        </div>\n                        <div className=\"col-md-3\">\n                            { this.props.isAccountManager && \n                                <DuButtons \n                                    updateFormTo={`/update-user/${user.id}`}\n                                    onDelete={() => this.deleteUser(user)}\n                                /> \n                            }                     \n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default User \n","import axios from 'axios'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { checkIfAccountManager, refreshState } from '../../utils/securityUtils'\nimport RedirectFormButton from '../RedirectFormButton'\nimport User from './User'\n\nclass UserDashboard extends Component {\n    constructor() {\n        super()\n        this.state = {\n            users: [],\n            errors: {deleted:{}}\n        }\n        this.deleteUser=this.deleteUser.bind(this)\n    }\n\n    async deleteUser(user) {\n        const id = user.id\n        if (window.confirm(`Are you sure yout want to delete ${user.fullName} (${user.username})?`)) {\n            try {\n                await axios.delete(`/api/account/user/${id}`)\n                const refreshedUsers = this.state.users.filter(userFromList => userFromList.id !== id)\n                this.setState({users: refreshedUsers})\n            } catch(error) {\n                this.setState({ errors: {deleted: {[\"id\" + id]: error.response.data}}})\n            }\n        }  \n       \n    }\n\n    componentDidMount() {\n        refreshState()\n        axios.get('/api/logged-in/user').then((results) => this.setState({ users: results.data }));\n    } \n\n    render() {\n        const isAccountManager = checkIfAccountManager(this.props.user)\n        return (\n            <div className=\"users\">\n                <div className=\"container\">\n                    <div className=\"row\"> \n                        <div className=\"col-md-12\">\n                            <h1 className=\"display-4 text-center\">Users</h1>\n                            <br />\n                            { isAccountManager &&\n                                ( <RedirectFormButton formRoute=\"/add-user\" buttonLabel=\"Add User\"/>)\n                            }\n                           \n                            <br />\n                            <hr />\n                            {this.state.users.map(user => (\n                                <User \n                                    isAccountManager={isAccountManager}\n                                    key={user.id } \n                                    user={user} \n                                    deleteUser={this.deleteUser} \n                                    errors={this.state.errors.deleted[\"id\" + user.id] ? this.state.errors.deleted[\"id\" + user.id] : {}}/>\n                            ))\n                                \n                            }\n                           \n                        </div>\n                    </div>\n                </div>\n            </div>\n        )   \n    }\n}\n\nconst mapStateToProps = state => ({\n    user: state.security.user\n})\n\nexport default connect(mapStateToProps) (UserDashboard)","import axios from 'axios'\nimport classNames from 'classnames'\nimport React, { Component } from 'react'\n\nexport default class ChangePassword extends Component {\n    constructor() {\n        super()\n        this.state = {\n            oldPassword: \"\",\n            newPassword: \"\",\n            newPassword2: \"\",\n            errors: {}\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.onChangeBasicInputs = this.onChangeBasicInputs.bind(this)\n    }\n\n    async onSubmit(e) {\n        e.preventDefault()\n        const passwordInput = {\n            oldPassword: this.state.oldPassword,\n            newPassword: this.state.newPassword,\n            newPassword2: this.state.newPassword2\n        }\n        try {\n            await axios.patch(\"/api/logged-in/user\", passwordInput)\n            this.props.history.push(\"/chem-items\")\n        } catch (error) {\n            this.setState({errors: error.response.data})\n        }\n    }\n\n    onChangeBasicInputs(e) {\n        this.setState({ [e.target.name]: e.target.value})\n    }\n\n    render() {\n        const {errors} = this.state\n        return (\n            <div className=\"change-password\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                    \n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Change Password</h1>\n                            {\n                                (errors.message && <h5 className=\"invalid-input\">{errors.message}</h5>)\n                            }\n                            {\n                                (errors.message && \n                                <div className=\"form-group row mb-3 invalid-feedback\">\n                                    {errors.message}\n                                </div>)\n                            }\n                            <form onSubmit={this.onSubmit}>\n\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"oldPassword\" className=\"col-sm-4 col-form-label\">Old password</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"oldPassword\"\n                                            value={this.state.oldPassword}\n                                            onChange={this.onChangeBasicInputs}\n                                            type=\"password\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.oldPassword})} \n                                            placeholder=\"old password\" \n                                        />\n                                        {\n                                            errors.oldPassword && <div  className=\"invalid-feedback\">{errors.oldPassword}</div>\n                                        }\n                                    </div>\n                                </div>\n                                \n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"newPassword\" className=\"col-sm-4 col-form-label\">New password</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"newPassword\"\n                                            value={this.state.newPassword}\n                                            onChange={this.onChangeBasicInputs}\n                                            type=\"password\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.newPassword})} \n                                            placeholder=\"new password\" \n                                        />\n                                        {\n                                            errors.newPassword && <div  className=\"invalid-feedback\">{errors.newPassword}</div>\n                                        }\n                                    </div>\n                                </div>\n\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"newPassword2\" className=\"col-sm-4 col-form-label\">New password (again)</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"newPassword2\"\n                                            value={this.state.newPassword2}\n                                            onChange={this.onChangeBasicInputs}\n                                            type=\"password\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.newPassword2})} \n                                            placeholder=\"new password (again)\" \n                                            \n                                        />\n                                        {\n                                            errors.newPassword2 && <div className=\"invalid-feedback\">{errors.newPassword2}</div>\n                                        }\n                                    </div>\n                                </div>\n                                \n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n","import Multiselect from 'multiselect-react-dropdown'\nimport React, { Component } from 'react'\nimport classNames from \"classnames\";\nimport axios from \"axios\";\nimport { check, checkIfAccountManager } from '../../utils/securityUtils'\nimport { connect } from 'react-redux';\n\nconst getEmptyUser = () => {\n    return {\n        username: \"\",\n        fullName: \"\",\n        labsAsUser: [{name:\"foo\"}, {name:\"bar\"}, {name:\"baz\"}], \n        labsAsAdmin: [],\n        roles: []\n    }\n}\n\nclass UpdateUser extends Component {\n    constructor() {\n        super()\n        this.state = {\n            username: \"\",\n            fullName: \"\",\n            labsAsUser: [], \n            labsAsAdmin: [],\n            roles: [],\n            labs: [],\n            persistedUser: getEmptyUser(),\n            errors: {}\n        }\n        this.onChangeBasicInputs=this.onChangeBasicInputs.bind(this)\n        this.labsAsUserMultiSelect = React.createRef();\n        this.labsAsAdminMultiselect = React.createRef();\n        this.rolesMultiselect = React.createRef();\n        this.onSubmit=this.onSubmit.bind(this)\n    }\n\n    componentDidMount() {\n        check()\n        if (!checkIfAccountManager(this.props.user)) {\n            this.props.history.push(\"/users\")\n        } else {\n            const id = this.props.match.params.id\n            this.setState({\n                id: id\n            })\n            axios.get('/api/logged-in/lab').then((results) => this.setState({ labs: results.data }))\n            axios.get('/api/logged-in/role').then((results) => this.setState({ roles: results.data }));\n            axios.get(`/api/account/user/${id}`).then((results) => {\n                this.setState({ \n                persistedUser: results.data,\n                username: results.data.username,\n                fullName: results.data.fullName,\n            })});\n        }\n\n    }\n\n    onChangeBasicInputs(e) {\n        check()\n        this.setState({ [e.target.name]: e.target.value})\n    }\n\n    async onSubmit(e) {\n        e.preventDefault()\n        const userInput = {\n            username: this.state.username,\n            fullName: this.state.fullName,\n            labKeysAsUser: this.labsAsUserMultiSelect.current.getSelectedItems().map(lab => lab.key), \n            labKeysAsAdmin: this.labsAsAdminMultiselect.current.getSelectedItems().map(lab => lab.key),\n            roles: this.rolesMultiselect.current.getSelectedItems().map(role => role.key)\n        }\n        try {\n            await axios.put(`/api/account/user/${this.state.id}`, userInput)\n            this.props.history.push(\"/users\")\n        } catch (error) {\n            this.setState({errors: error.response.data})\n        }\n    }\n\n\n    render() {\n        const {errors} = this.state\n        return (\n            <div className=\"register\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                    \n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Update User</h1>\n                            <p className=\"lead text-center\">Update existing user</p>\n                            {\n                                (errors.message && <h5 className=\"invalid-input\">{errors.message}</h5>)\n                            }\n                            {\n                                (errors.message && \n                                <div className=\"form-group row mb-3 invalid-feedback\">\n                                    {errors.message}\n                                </div>)\n                            }\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"username\" className=\"col-sm-4 col-form-label\">username</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"username\"\n                                            value={this.state.username}\n                                            onChange={this.onChangeBasicInputs}\n                                            type=\"email\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.username})} \n                                            placeholder=\"username (email)\" \n                                            \n                                        />\n                                        \n                                        {\n                                            (errors.username && <div className=\"invalid-feedback\">{errors.username}</div>)\n                                        }\n                                       \n                                    </div>    \n                                </div>\n                                      \n                                \n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"fullName\" className=\"col-sm-4 col-form-label\">Full name</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"fullName\"\n                                            value={this.state.fullName}\n                                            onChange={this.onChangeBasicInputs}\n                                            type=\"text\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.fullName})} \n                                            placeholder=\"full name\"  \n                                        />\n                                    {errors.fullName && (\n                                        <div className=\"invalid-feedback\">{errors.fullName}</div>\n                                    )}\n                                    </div>\n\n                                </div>\n\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"labsAsUser\" className=\"col-sm-4 col-form-label\">Labs, where user can administrate (open, use, etc) chemicals</label>\n                                    <div className=\"col-sm-8\">\n                                        <Multiselect\n                                            displayValue=\"name\"\n                                            placeholder='labs as user'\n                                            onSearch={function noRefCheck(){}}\n                                            closeOnSelect={false}\n                                            style={{searchBox: {\"fontSize\": \"20px\"}}}\n                                            options={this.state.labs}\n                                            selectedValues={this.state.persistedUser.labsAsUser}\n                                            ref={this.labsAsUserMultiSelect}\n                                            showCheckbox\n                                            />\n                                        </div>\n                                </div>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"labsAsAdmin\" className=\"col-sm-4 col-form-label\">Labs, where user is administrator</label>\n                                    <div className=\"col-sm-8\">\n                                        <Multiselect\n                                            displayValue=\"name\"\n                                            placeholder='admin in labs'\n                                            onSearch={function noRefCheck(){}}\n                                            closeOnSelect={false}\n                                            style={{searchBox: {\"fontSize\": \"20px\"}}}\n                                            options={this.state.labs}\n                                            selectedValues={this.state.persistedUser.labsAsAdmin}\n                                            ref={this.labsAsAdminMultiselect}\n                                            showCheckbox\n                                        />\n                                        </div>\n                                </div>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"roles\" className=\"col-sm-4 col-form-label\">Additional roles</label>\n                                    <div className=\"col-sm-8\">\n                                        <Multiselect\n                                            displayValue=\"name\"\n                                            placeholder='roles'\n                                            onSearch={function noRefCheck(){}}\n                                            closeOnSelect={false}\n                                            style={{searchBox: {\"fontSize\": \"20px\"}}}\n                                            options={this.state.roles}\n                                            selectedValues={this.state.persistedUser.roles}\n                                            ref={this.rolesMultiselect}\n                                            showCheckbox\n                                        />\n                                    </div>\n                                </div>\n                                <button type=\"submit\" className=\"d-flex p-2 btn btn-info btn-block mt-4\">Update User</button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    user: state.security.user\n})\n\nexport default connect(mapStateToProps) (UpdateUser)\n","import React, { Component } from 'react'\nimport DuButtons from './UI/DuButtons'\n\nexport default class NamedEntityCard extends Component {\n    constructor(props) {\n        super()\n        this.state = {\n            errors: {}\n        }\n        this.deleteNamedEntity = props.deleteNamedEntity\n    }\n\n\n    render() {\n        const {namedEntity} = this.props\n        return (\n            <div className=\"container\">\n                <div className=\"card card-body bg-light mb-3\" style={{padding: \"10px\"}}>\n                    <div className=\"row\" >\n                        <div className=\"col-sm-9\">\n                        <h4>{namedEntity.name}</h4>\n                        </div>\n                        <div className=\"col-sm-3\">\n                            {this.props.isAdmin && \n                                <DuButtons \n                                    updateFormTo={`${this.props.updateUrl}/${namedEntity.id}`}\n                                    onDelete={() => this.deleteNamedEntity(namedEntity)}\n                                /> \n                            }\n                            </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import axios from 'axios'\nimport React, { Component } from 'react'\nimport { refreshState } from '../../utils/securityUtils'\nimport RedirectFormButton from '../RedirectFormButton'\nimport NamedEntityCard from '../NamedEntityCard'\nimport { connect } from 'react-redux';\n\nclass ManufacturerDashboard extends Component {\n    constructor() {\n        super()\n        this.state = {\n            manufacturers: [],\n            errors: {deleted : {}}\n        }\n        this.deleteManufacturer=this.deleteManufacturer.bind(this)\n    }\n\n\n    async deleteManufacturer(manufacturer) {\n        const id = manufacturer.id\n        if (window.confirm(`Are you sure you want to delete '${manufacturer.name}'?`)) {\n            try {\n                await axios.delete(`/api/lab-admin/manufacturer/${id}`)\n                const refreshedMf = this.state.manufacturers.filter(mfFromList => mfFromList.id !== id)\n                this.setState({manufacturers: refreshedMf})\n            } catch (error) {\n                this.setState({ errors: {deleted: {[\"id\" + id]: error.response.data}}})\n            }\n\n        }\n    }\n\n    componentDidMount() {\n        refreshState()\n        axios.get('/api/logged-in/manufacturer').then(result => this.setState({manufacturers: result.data}))\n    }\n\n    render() {\n        const isAdmin = this.props.user.authorities.some(listItem => listItem.authority === \"LAB_MANAGER\" || listItem.authority === \"LAB_ADMIN\")\n        return (\n            <div className=\"manufacturers\">\n                <div className=\"container\">\n                    <div className=\"row\"> \n                        <div className=\"col-md-12\">\n                            <h1 className=\"display-4 text-center\">Manufacturers</h1>\n                            <br />\n                            {isAdmin &&\n                                (<RedirectFormButton formRoute=\"/add-manufacturer\" buttonLabel=\"Add Manufacturer\"/>)\n                            }\n                            <br />\n                            <hr />\n                            {this.state.manufacturers.map(manufacturer => (\n                                <NamedEntityCard \n                                    isAdmin={isAdmin}\n                                    namedEntity={manufacturer} \n                                    updateUrl=\"/update-manufacturer\"\n                                    key={manufacturer.id} deleteNamedEntity={this.deleteManufacturer} \n                                    errors={this.state.errors.deleted[\"id\" + manufacturer.id] ? this.state.errors.deleted[\"id\" + manufacturer.id] : {}}\n                                />\n                            ))\n                                \n                            }\n                           \n                        </div>\n                    </div>\n                </div>\n            </div>\n        ) \n    }\n}\n\n\nconst mapStateToProps = state => ({\n    user: state.security.user\n})\n\nexport default connect(mapStateToProps) (ManufacturerDashboard)\n\n","import React, { Component } from 'react'\nimport classNames from \"classnames\";\nimport axios from 'axios';\n\nexport default class AddManufacturer extends Component {\n    constructor() {\n        super()\n        this.state = {\n            name: \"\",\n            errors: {}\n        }\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    async onSubmit(e) {\n        e.preventDefault()\n        const newManufacturer = {name: this.state.name}\n        try {\n            await axios.post('/api/lab-admin/manufacturer', newManufacturer)\n            this.props.history.push(\"/manufacturers\")\n        } catch(error) {\n            this.setState({errors: error.response.data})\n        }\n    }\n\n    render() {\n        const {errors} = this.state\n        return (\n            <div className=\"add-manufacturer\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                    \n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Add Manufacturer</h1>\n                            <p className=\"lead text-center\">Create a manufacturer (for the whole account/company)</p>\n                            <br/>\n                            {\n                                (errors.message && <h5 className=\"invalid-input\">{errors.message}</h5>)\n                            }\n                            {\n                                (errors.message && \n                                <div className=\"form-group row mb-3 invalid-feedback\">\n                                    {errors.message}\n                                </div>)\n                            }\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"username\" className=\"col-sm-4 col-form-label\">name</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"name\"\n                                            value={this.state.name}\n                                            onChange={this.onChange}\n                                            type=\"text\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.name})} \n                                            placeholder=\"manufacturer name\" \n                                        />\n                                        {\n                                            (errors.name && <div className=\"invalid-feedback\">{errors.name}</div>)\n                                        }\n                                       \n                                    </div>\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Add Manufacturer</button>\n                                \n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import axios from 'axios'\nimport classNames from 'classnames'\nimport React, { Component } from 'react'\nimport { check } from '../../utils/securityUtils'\n\nexport default class UpdateManufacturer extends Component {\n    constructor() {\n        super()\n        this.state = {\n            name: \"\",\n            errors: {}\n        }\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    componentDidMount() {\n        axios.get(`/api/lab-admin/manufacturer/${this.props.match.params.id}`).then(result => this.setState({name: result.data.name} ))\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    async onSubmit(e) {\n        check()\n        e.preventDefault()\n        const input = {name: this.state.name}\n        try {\n            await axios.put(`/api/lab-admin/manufacturer/${this.props.match.params.id}`, input)\n            this.props.history.push(\"/manufacturers\")\n        } catch(error) {\n            this.setState({errors: error.response.data})\n        }\n    }\n    render() {\n        const {errors} = this.state\n        return (\n            <div className=\"update-manufacturer\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                    \n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Update Manufacturer</h1>\n                            <p className=\"lead text-center\">Modify a manufacturer (for the whole account/company)</p>\n                            <br/>\n                            {\n                                (errors.message && <h5 className=\"invalid-input\">{errors.message}</h5>)\n                            }\n                            {\n                                (errors.message && \n                                <div className=\"form-group row mb-3 invalid-feedback\">\n                                    {errors.message}\n                                </div>)\n                            }\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"username\" className=\"col-sm-4 col-form-label\">name</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"name\"\n                                            value={this.state.name}\n                                            onChange={this.onChange}\n                                            type=\"text\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.name})} \n                                            placeholder=\"manufacturer name\" \n                                        />\n                                        {\n                                            (errors.username && <div className=\"invalid-feedback\">{errors.username}</div>)\n                                        }\n                                       \n                                    </div>\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Update Manufacturer</button>\n                                \n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport DuButtons from '../UI/DuButtons'\n\nexport default class ChemicalCard extends Component {\n    constructor(props) {\n        super()\n        this.state = {\n            errors: {}\n        }\n        this.deleteChemical = props.deleteChemical\n    }\n\n\n    render() {\n        const {chemical} = this.props\n        return (\n            <div className=\"container\">\n                <div className=\"card card-body bg-light mb-3\" style={{padding: \"10px\"}}>\n                    <div className=\"row\" >\n                        <div className=\"col-2\">\n                            <span className=\"mx-auto\">{chemical.shortName}</span>\n                        </div>\n                        <div className=\"col-sm-7\">\n                            <h4>{chemical.exactName}</h4>\n                            { this.drawCategory(chemical)}\n                        </div>\n                        <div className=\"col-sm-3\">\n                            { this.props.isAdmin && \n                                <DuButtons \n                                    updateFormTo={`update-chemical/${chemical.id}`}\n                                    onDelete={() => this.deleteChemical(chemical)}\n                                /> \n                               \n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    drawCategory(chemical) {\n        if (chemical.category) {\n            return (<i>{chemical.category.name}</i>)\n        }\n        return (<i>n.a</i>)\n    }\n}\n","import axios from 'axios'\nimport React, { Component } from 'react'\nimport { check } from '../../utils/securityUtils'\nimport RedirectFormButton from '../RedirectFormButton'\nimport ChemicalCard from './ChemicalCard'\nimport { connect } from 'react-redux'\nimport PropTypes from \"prop-types\";\n\nclass ChemicalDashboard extends Component {\n    constructor() {\n        super()\n        this.state = {\n            chemicals: [],\n            errors: {\n                deleted : {},\n                chemicalsErrorStatus: \"\"}\n        }\n        this.deleteChemical=this.deleteChemical.bind(this)\n    }\n\n\n    async deleteChemical(chemical) {\n        const id = chemical.id\n        if (window.confirm(`Are you sure you want to delete '${chemical.shortName}' (${chemical.exactName})?`)) {\n            try {\n                await axios.delete(`/api/lab-admin/chemical/${id}`)\n                const refreshedChemical = this.state.chemicals.filter(chemicalFromList => chemicalFromList.id !== id)\n                this.setState({chemicals: refreshedChemical})\n            } catch (error) {\n                this.setState({ errors: {deleted: {[\"id\" + id]: error.response.data}}})\n            }\n\n        }\n    }\n\n    async componentDidMount() {\n        check()\n        const selectedLab = this.props.selectedLab\n        this.loadChemicals(selectedLab)\n    }\n\n    async componentWillReceiveProps(nextProps){\n        const selectedLab = nextProps.selectedLab\n        console.log(\"in componentWillReceiveProps \" + JSON.stringify(selectedLab))\n        this.loadChemicals(selectedLab)\n    }\n\n\n    async loadChemicals(selectedLab) {\n        if (selectedLab && selectedLab.key) {\n            try {\n                await axios.get(`/api/logged-in/chemical/${selectedLab.value}`).then(result => this.setState({chemicals: result.data}))\n            } catch (error) {\n                console.log(\"error in get chemicals: \" + error)\n                this.setState({ errors: {...this.state.errors, chemicalsErrorStatus: error.response.status}})\n            }\n\n            console.log(\"in componentWillReceiveProps \" + JSON.stringify(selectedLab))\n        }\n    }\n\n\n    render() {\n        const isAdmin = (this.props.selectedLab.key) && \n                        (this.props.user.labsAsAdmin.includes(this.props.selectedLab.value) || \n                        this.props.selectedLab.labManagers.map(manager => manager.username).includes(this.props.user.username))\n        return (\n            <div className=\"chemicals\">\n                <div className=\"container\">\n                    <div className=\"row\"> \n                        <div className=\"col-md-12\">\n                            <h1 className=\"display-4 text-center\">Chemicals</h1>\n                            <p className=\"lead text-center\">With the help of this pre-defined list of chemicals, you can easily register the concrete chemical items into your lab.</p>\n                            <br />\n                            { isAdmin && \n                                (<RedirectFormButton formRoute=\"/add-chemical\" buttonLabel=\"Add Chemical\"/>)\n                            }\n                            <br />\n                            <hr />\n                            {this.props.selectedLab.key ? \n                                this.getCards(isAdmin) :\n                                <p className=\"lead\"><i>Please select a lab</i></p>\n                            }\n                               \n                           \n                        </div>\n                    </div>\n                </div>\n            </div>\n        ) \n    }\n\n    getCards(isAdmin) {\n        return this.state.chemicals.map(chemical => (\n                <ChemicalCard \n                    lab={this.props.selectedLab}\n                    isAdmin={isAdmin}\n                    chemical={chemical} \n                    key={chemical.id} \n                    deleteChemical={this.deleteChemical}\n                    errors={this.state.errors.deleted[\"id\" + chemical.id] ? this.state.errors.deleted[\"id\" + chemical.id] : {}}\n                />))\n    }\n}\n\n\n\nChemicalDashboard.propTypes = {\n    selectedLab: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    selectedLab: state.selectedLab,\n    user: state.security.user\n})\n\nexport default connect(mapStateToProps) (ChemicalDashboard)\n\n","import React, { Component } from 'react'\nimport classNames from \"classnames\";\nimport axios from 'axios';\nimport Select from 'react-dropdown-select';\nimport { check, checkIfAdmin } from '../../utils/securityUtils';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\n\n\nclass AddChemical extends Component {\n    constructor() {\n        super()\n        this.state = {\n            categories: [],\n            shortName: \"\",\n            exactName: \"\",\n            categoryId: 0,\n            errors: {}\n        }\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n\n    componentWillReceiveProps(nextProps){\n        const selectedLab = nextProps.selectedLab\n        this.handleChange(selectedLab)\n    }\n\n    componentDidMount() {\n        const selectedLab = this.props.selectedLab\n        this.handleChange(selectedLab)\n    }\n\n    handleChange(selectedLab) {\n        check()\n        if (checkIfAdmin(selectedLab, this.props.user)) {\n            this.loadCategories(selectedLab)\n        } else {\n            this.props.history.push(\"/chemicals\")\n        }\n    }\n\n    async loadCategories(selectedLab) {\n        if (selectedLab && selectedLab.key) {\n            try {\n                await axios.get(`/api/logged-in/chem-category/${selectedLab.value}`).then(result => this.setState({categories: result.data}))\n            } catch (error) {\n                console.log(\"error in get chem-categories: \" + error)\n                this.setState({ errors: {...this.state.errors, categoriesErrorStatus: error.response.status}})\n            }\n        }\n    }\n\n    async onSubmit(e) {\n        check()\n        e.preventDefault()\n        const newChemical = {\n            labKey: this.props.selectedLab.key,\n            shortName: this.state.shortName,\n            exactName: this.state.exactName,\n            categoryId: this.state.categoryId\n        }\n        try {\n            await axios.post('/api/lab-admin/chemical', newChemical)\n            this.props.history.push(\"/chemicals\")\n        } catch(error) {\n            this.setState({errors: error.response.data})\n        }\n    }\n\n    render() {\n        const {errors} = this.state\n        return (\n            <div className=\"add-chemical\">\n                <div className=\"container\">\n                    <div className=\"row\">                        \n                        <div className=\"col-md-8 m-auto\">\n\n                            <h1 className=\"display-4 text-center\">Add Chemical</h1>\n                            <p className=\"lead text-center\">Create a chemical (for the whole account/company)</p>\n                            <br/>\n                            {\n                                (errors.message && \n                                <div className=\"form-group row mb-3 invalid-feedback\">\n                                    {errors.message}\n                                </div>)\n                            }\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"shortName\" className=\"col-sm-4 col-form-label\">short name</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"shortName\"\n                                            value={this.state.shortName}\n                                            onChange={this.onChange}\n                                            type=\"text\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.shortName})} \n                                            placeholder=\"short name\" \n                                        />\n                                        {\n                                            (errors.shortName && <div className=\"invalid-feedback\">{errors.shortName}</div>)\n                                        }\n                                       \n                                    </div>\n                                </div>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"exactName\" className=\"col-sm-4 col-form-label\">exact name</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"exactName\"\n                                            value={this.state.exactName}\n                                            onChange={this.onChange}\n                                            type=\"text\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.exactName})} \n                                            placeholder=\"exact name\" \n                                        />\n                                        {\n                                            (errors.exactName && <div className=\"invalid-feedback\">{errors.exactName}</div>)\n                                        }\n                                       \n                                    </div>\n                                </div>\n\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"category\" className=\"col-sm-4 col-form-label\">category</label>\n                                    <div className=\"col-sm-8\">\n                                      <Select\n                                            options={this.state.categories}\n                                            labelField=\"name\"\n                                            valueField=\"id\"\n                                            placeholder=\"category\"\n                                            searchable=\"true\"\n                                            searchBy=\"name\"\n                                            clearable=\"true\"\n                                            style={{height: \"42px\", fontSize: \"16px\"}}\n                                            onChange={(items) => this.setState({categoryId: items[0].id })}\n                                      />\n                                        {\n                                            (errors.chemType && <div className=\"invalid-feedback\">{errors.chemType}</div>)\n                                        }\n                                       \n                                    </div>\n                                </div>    \n                                <button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Add Chemical</button>\n                                \n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nAddChemical.propTypes = {\n    selectedLab: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    selectedLab: state.selectedLab,\n    user: state.security.user\n})\n\nexport default connect(mapStateToProps) (AddChemical)\n\n","import axios from 'axios'\nimport classNames from 'classnames'\nimport React, { Component } from 'react'\nimport { check, checkIfAdmin } from '../../utils/securityUtils'\nimport Select from 'react-dropdown-select';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\n\nclass UpdateChemical extends Component {\n    constructor() {\n        super()\n        this.state = {\n            categories: [],\n            shortName: \"\",\n            exactName: \"\",\n            categoryId: 0,\n            errors: {}\n        }\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    async componentWillReceiveProps(nextProps){\n        const selectedLab = nextProps.selectedLab\n        this.handleChange(selectedLab)\n    }\n\n    componentDidMount() {\n        const selectedLab = this.props.selectedLab\n        this.handleChange(selectedLab)\n        axios.get(`/api/lab-admin/chemical/${this.props.match.params.id}`).then(result => this.setState({\n            shortName: result.data.shortName,\n            exactName: result.data.exactName,\n            categoryId: result.data.category.id\n        } ))\n    }\n\n    handleChange(selectedLab) {\n        check()\n        if (checkIfAdmin(selectedLab, this.props.user)) {\n            this.loadCategories(selectedLab)\n        } else {\n            this.props.history.push(\"/chemicals\")\n        }\n        \n    }\n\n    async loadCategories(selectedLab) {\n        if (selectedLab && selectedLab.key) {\n            try {\n                await axios.get(`/api/logged-in/chem-category/${selectedLab.value}`).then(result => this.setState({categories: result.data}))\n            } catch (error) {\n                console.log(\"error in get chem-categories: \" + error)\n                this.setState({ errors: {...this.state.errors, categoriesErrorStatus: error.response.status}})\n            }\n        }\n    }\n\n    async onSubmit(e) {\n        check()\n        e.preventDefault()\n        const updatedChemical = {\n            labKey: this.props.selectedLab.key,\n            shortName: this.state.shortName,\n            exactName: this.state.exactName,\n            categoryId: this.state.categoryId\n        }\n        try {\n            await axios.put(`/api/lab-admin/chemical/${this.props.match.params.id}`, updatedChemical)\n            this.props.history.push(\"/chemicals\")\n        } catch(error) {\n            this.setState({errors: error.response.data})\n        }\n    }\n    render() {\n        const {errors} = this.state\n        return (\n            <div className=\"container\">\n                \n                \n                    <div className=\"col-md-8 m-auto\">\n                        <h1 className=\"display-4 text-center\">Update Chemical</h1>\n                        <br/>\n                        {\n                            (errors.message && <h5 className=\"invalid-input\">{errors.message}</h5>)\n                        }\n                        {\n                            (errors.message && \n                            <div className=\"form-group row mb-3 invalid-feedback\">\n                                {errors.message}\n                            </div>)\n                        }\n                        <form onSubmit={this.onSubmit}>\n                            <div className=\"form-group row mb-3\">\n                                <label htmlFor=\"shortName\" className=\"col-sm-4 col-form-label\">short name</label>\n                                <div className=\"col-sm-8\">\n                                    <input \n                                        name=\"shortName\"\n                                        value={this.state.shortName}\n                                        onChange={this.onChange}\n                                        type=\"text\" \n                                        className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.shortName})} \n                                        placeholder=\"short name\" \n                                    />\n                                    {\n                                        (errors.shortName && <div className=\"invalid-feedback\">{errors.shortName}</div>)\n                                    }\n                                    \n                                </div>\n                            </div>\n                            <div className=\"form-group row mb-3\">\n                                <label htmlFor=\"exactName\" className=\"col-sm-4 col-form-label\">exact name</label>\n                                <div className=\"col-sm-8\">\n                                    <input \n                                        name=\"exactName\"\n                                        value={this.state.exactName}\n                                        onChange={this.onChange}\n                                        type=\"text\" \n                                        className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.exactName})} \n                                        placeholder=\"exact name\" \n                                    />\n                                    {\n                                        (errors.exactName && <div className=\"invalid-feedback\">{errors.exactName}</div>)\n                                    }\n                                    \n                                </div>\n                            </div>\n\n                            <div className=\"form-group row mb-3\">\n                                <label htmlFor=\"exactName\" className=\"col-sm-4 col-form-label\">category</label>\n                                <div className=\"col-sm-8\">\n                                    <Select\n                                            options={this.state.categories}\n                                            labelField=\"name\"\n                                            values={this.state.categories.filter(category => category.id === this.state.categoryId)}\n                                            valueField=\"id\"\n                                            placeholder=\"category\"\n                                            searchable=\"true\"\n                                            searchBy=\"name\"\n                                            clearable=\"true\"\n                                            style={{height: \"42px\", fontSize: \"16px\"}}\n                                            onChange={(items) => this.setState({categoryId: items[0].id })}\n                                    />\n                                    {\n                                        (errors.chemType && <div className=\"invalid-feedback\">{errors.chemType}</div>)\n                                    }\n                                    \n                                </div>\n                            </div>\n                            \n                            <button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Update Chemical</button>\n                            \n                        </form>\n                    </div>\n                \n            </div>\n        )\n    }\n}\n\nUpdateChemical.propTypes = {\n    selectedLab: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    selectedLab: state.selectedLab,\n    user: state.security.user\n})\n\nexport default connect(mapStateToProps) (UpdateChemical)\n","import React, { Component } from 'react'\nimport DuButtons from '../UI/DuButtons'\n\nexport default class LabCard extends Component {\n    constructor(props) {\n        super()\n        this.state = {\n            errors: {}\n        }\n        this.deleteLab = props.deleteLab\n    }\n\n\n    render() {\n        const {lab} = this.props\n        return (\n            <div className=\"container\">\n                <div className=\"card card-body bg-light mb-3\" style={{padding: \"10px\"}}>\n                    <div className=\"row\" >\n                        <div className=\"col-2\">\n                            <span className=\"mx-auto\">{lab.key}</span>\n                        </div>\n                        <div className=\"col-sm-7\">\n                            <h4>{lab.name}</h4>\n                            <i>({lab.labManagers.map(manager => manager.fullName).join(\",\")})</i>\n                        </div>\n                        <div className=\"col-sm-3\">\n                            {this.props.isAccountManager &&\n                                <DuButtons \n                                    updateFormTo={`update-lab/${lab.id}`}\n                                    onDelete={() => this.deleteLab(lab)}\n                                /> \n                            }\n                        </div>\n                        \n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n","import axios from 'axios'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { checkIfAccountManager, refreshState } from '../../utils/securityUtils'\nimport RedirectFormButton from '../RedirectFormButton'\nimport LabCard from './LabCard'\n\nclass LabDashboard extends Component {\n    constructor() {\n        super()\n        this.state = {\n            labs: [],\n            errors: {deleted : {}}\n        }\n        this.deleteLab=this.deleteLab.bind(this)\n    }\n\n\n    async deleteLab(lab) {\n        const id = lab.id\n        if (window.confirm(`Are you sure you want to delete '${lab.name}' (${lab.key})?`)) {\n            try {\n                await axios.delete(`/api/account/lab/${id}`)\n                const refreshedLabs = this.state.labs.filter(labFromList => labFromList.id !== id)\n                this.setState({labs: refreshedLabs})\n            } catch (error) {\n                this.setState({ errors: {deleted: {[\"id\" + id]: error.response.data}}})\n            }\n\n        }\n    }\n\n    componentDidMount() {\n        refreshState()\n        axios.get('/api/logged-in/lab').then(result => this.setState({labs: result.data}))\n    }\n\n    render() {\n        const isAccountManager = checkIfAccountManager(this.props.user)\n        return (\n            <div className=\"labs\">\n                <div className=\"container\">\n                    <div className=\"row\"> \n                        <div className=\"col-md-12\">\n                            <h1 className=\"display-4 text-center\">Labs</h1>\n                            <p className=\"lead text-center\">Laboratories of the company</p>\n                            <br />\n                            {isAccountManager &&\n                                (<RedirectFormButton formRoute=\"/add-lab\" buttonLabel=\"Add Lab\"/>)\n                            }\n                            <br />\n                            <hr />\n                            {this.state.labs.map(lab => (\n                                <LabCard \n                                    isAccountManager={isAccountManager}\n                                    lab={lab} \n                                    key={lab.id} \n                                    deleteLab={this.deleteLab}\n                                    errors={this.state.errors.deleted[\"id\" + lab.id] ? this.state.errors.deleted[\"id\" + lab.id] : {}}\n                                />\n                            ))\n                                \n                            }\n                           \n                        </div>\n                    </div>\n                </div>\n            </div>\n        ) \n    }\n}\n\nconst mapStateToProps = state => ({\n    user: state.security.user\n})\n\nexport default connect(mapStateToProps) (LabDashboard)\n\n","import React, { Component } from 'react'\nimport classNames from \"classnames\";\nimport axios from 'axios';\nimport { check, checkIfAccountManager } from '../../utils/securityUtils';\nimport Multiselect from 'multiselect-react-dropdown';\nimport { connect } from 'react-redux';\n\n\nclass AddLab extends Component {\n    constructor() {\n        super()\n        this.state = {\n            key: \"\",\n            name: \"\",\n            labManagerUsernames: [],\n            users: [],\n            errors: {}\n        }\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.managersOfLabMultiselect = React.createRef();\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    componentDidMount() {\n        check()\n        if (!checkIfAccountManager(this.props.user)) {\n            this.props.history.push(\"/labs\")\n        } else {\n            axios.get('/api/account/user')\n            .then(result => this.setState({users: result.data}))\n            .catch(error => this.props.history.push(\"/labs\"))\n        }\n        \n    }\n\n    async onSubmit(e) {\n        check()\n        e.preventDefault()\n        const input = {\n            key: this.state.key,\n            name: this.state.name,\n            labManagerUsernames: this.managersOfLabMultiselect.current.getSelectedItems().map(user => user.username)\n        }\n        try {\n            await axios.post('/api/account/lab', input)\n            this.props.history.push(\"/labs\")\n        } catch(error) {\n            this.setState({errors: error.response.data})\n        }\n    }\n\n    render() {\n        const {errors} = this.state\n        return (\n            <div className=\"add-lab\">\n                <div className=\"container\">\n                    <div className=\"row\">                 \n                        <div className=\"col-md-8 m-auto\">\n\n                    \n                            <h1 className=\"display-4 text-center\">Add Lab</h1>\n                            <p className=\"lead text-center\">Create a lab</p>\n                            <br/>\n                            {\n                                (errors.message && \n                                <div className=\"form-group row mb-3 invalid-feedback\">\n                                    {errors.message}\n                                </div>)\n                            }\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"key\" className=\"col-sm-4 col-form-label\">key</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"key\"\n                                            value={this.state.key}\n                                            onChange={this.onChange}\n                                            type=\"text\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.key})} \n                                            placeholder=\"key (eg: compound-lab)\" \n                                        />\n                                        {\n                                            (errors.key && <div className=\"invalid-feedback\">{errors.key}</div>)\n                                        }\n                                       \n                                    </div>\n                                </div>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"name\" className=\"col-sm-4 col-form-label\">name</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"name\"\n                                            value={this.state.name}\n                                            onChange={this.onChange}\n                                            type=\"text\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.name})} \n                                            placeholder=\"name\" \n                                        />\n                                        {\n                                            (errors.name && <div className=\"invalid-feedback\">{errors.name}</div>)\n                                        }\n                                       \n                                    </div>\n                                </div>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"managers\" className=\"col-sm-4 col-form-label\">Managers of lab</label>\n                                    <div className=\"col-sm-8\">\n                                        <Multiselect\n                                            displayValue=\"fullName\"\n                                            placeholder='managers of lab'\n                                            onSearch={function noRefCheck(){}}\n                                            closeOnSelect={false}\n                                            style={{searchBox: {\"fontSize\": \"20px\"}}}\n                                            options={this.state.users}\n                                            ref={this.managersOfLabMultiselect}\n                                            showCheckbox\n                                        />\n                                        </div>\n                                </div>\n\n                            \n                                \n                                <button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Add Lab</button>\n                                \n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => ({\n    user: state.security.user\n})\n\nexport default connect(mapStateToProps) (AddLab)\n","import React, { Component } from 'react'\nimport classNames from \"classnames\";\nimport axios from 'axios';\nimport { check, checkIfAccountManager } from '../../utils/securityUtils';\nimport Multiselect from 'multiselect-react-dropdown';\nimport { connect } from 'react-redux';\n\nconst getEmptyLab = () => {\n    return {\n        id: -1,\n        key: \"\",\n        name: \"\",\n        labManagers: []\n    }\n}\n\n\nclass UpdateLab extends Component {\n    constructor() {\n        super()\n        this.state = {\n            key: \"\",\n            name: \"\",\n            labManagerUsernames: [],\n            users: [],\n            persistedLab: getEmptyLab(), \n            errors: {}\n        }\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.managersOfLabMultiselect = React.createRef();\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    componentDidMount() {\n        check()\n        if (!checkIfAccountManager(this.props.user)) {\n            this.props.history.push(\"/labs\")\n        } else {\n            const id = this.props.match.params.id\n            axios.get('/api/account/user').then(result => this.setState({users: result.data}))\n            axios.get(`/api/account/lab/${id}`).then(result => this.setState({\n                persistedLab: result.data,\n                key: result.data.key,\n                name: result.data.name,\n            }))\n        }\n\n    }\n\n    async onSubmit(e) {\n        check()\n        e.preventDefault()\n        const input = {\n            key: this.state.key,\n            name: this.state.name,\n            labManagerUsernames: this.managersOfLabMultiselect.current.getSelectedItems().map(user => user.username)\n        }\n        try {\n            await axios.put(`/api/account/lab/${this.props.match.params.id}`, input)\n            this.props.history.push(\"/labs\")\n        } catch(error) {\n            this.setState({errors: error.response.data})\n        }\n    }\n\n    render() {\n        const {errors} = this.state\n        return (\n            <div className=\"add-lab\">\n                <div className=\"container\">\n                    <div className=\"row\">                 \n                        <div className=\"col-md-8 m-auto\">\n\n                    \n                            <h1 className=\"display-4 text-center\">Update Lab</h1>\n                            <p className=\"lead text-center\">Modify the lab</p>\n                            <br/>\n                            {\n                                (errors.message && \n                                <div className=\"form-group row mb-3 invalid-feedback\">\n                                    {errors.message}\n                                </div>)\n                            }\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"key\" className=\"col-sm-4 col-form-label\">key</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"key\"\n                                            value={this.state.key}\n                                            onChange={this.onChange}\n                                            type=\"text\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.key})} \n                                            placeholder=\"key (eg: compound-lab)\" \n                                        />\n                                        {\n                                            (errors.key && <div className=\"invalid-feedback\">{errors.key}</div>)\n                                        }\n                                       \n                                    </div>\n                                </div>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"name\" className=\"col-sm-4 col-form-label\">name</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"name\"\n                                            value={this.state.name}\n                                            onChange={this.onChange}\n                                            type=\"text\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.name})} \n                                            placeholder=\"name\" \n                                        />\n                                        {\n                                            (errors.name && <div className=\"invalid-feedback\">{errors.name}</div>)\n                                        }\n                                       \n                                    </div>\n                                </div>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"managers\" className=\"col-sm-4 col-form-label\">Managers of lab</label>\n                                    <div className=\"col-sm-8\">\n                                        <Multiselect\n                                            displayValue=\"fullName\"\n                                            placeholder='managers of lab'\n                                            onSearch={function noRefCheck(){}}\n                                            closeOnSelect={false}\n                                            style={{searchBox: {\"fontSize\": \"20px\"}}}\n                                            options={this.state.users}\n                                            selectedValues={this.state.persistedLab.labManagers}\n                                            ref={this.managersOfLabMultiselect}\n                                            showCheckbox\n                                        />\n                                        </div>\n                                </div>\n\n                            \n                                \n                                <button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Update Lab</button>\n                                \n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    user: state.security.user\n})\n\nexport default connect(mapStateToProps) (UpdateLab)\n","\nexport const getShelfLife = (category) => {\n    const days = getDays(category.shelfLife)\n    return `${Math.round(days)} days`\n} \n\n\nexport const getDays = (javaDuration) => {\n    return javaDuration.split('H')[0].substring(2) / 24\n}","import React, { Component } from 'react'\nimport { getShelfLife } from '../../utils/durationUtils'\nimport DuButtons from '../UI/DuButtons'\n\nexport default class CategoryCard extends Component {\n    constructor(props) {\n        super()\n        this.state = {\n            errors: {}\n        }\n        this.deleteCategory = props.deleteCategory\n    }\n\n\n    render() {\n        const {category} = this.props\n        return (\n            <div className=\"container\">\n                <div className=\"card card-body bg-light mb-3\" style={{padding: \"10px\"}}>\n                    <div className=\"row\" >\n                        <div className=\"col-sm-4\">\n                            <h4>{category.name}</h4>\n                        </div>\n                        <div className=\"col-sm-5\">\n                            <span>{getShelfLife(category)}</span>\n                        </div>\n                        <div className=\"col-sm-3\">\n                            { this.props.isAdmin && \n                                <DuButtons \n                                    updateFormTo={`/update-category/${category.id}`}\n                                    onDelete={() => this.deleteCategory(category)}\n                                /> \n                               \n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\n    \n","import axios from 'axios'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { check } from '../../utils/securityUtils'\nimport RedirectFormButton from '../RedirectFormButton'\nimport CategoryCard from './CategoryCard'\nimport PropTypes from \"prop-types\";\n\nclass CategoryDashboard extends Component {\n    constructor() {\n        super()\n        this.state = {\n            categories: [],\n            errors: {\n                deleted : {},\n                categoriesErrorStatus: \"\",\n            }\n        }\n        this.deleteCategory=this.deleteCategory.bind(this)\n    }\n\n\n    async deleteCategory(category) {\n        const id = category.id\n        if (window.confirm(`Are you sure you want to delete ${category.name}?`)) {\n            try {\n                await axios.delete(`/api/lab-admin/chem-category/${id}`)\n                const refreshedCts = this.state.categories.filter(ctFromList => ctFromList.id !== id)\n                this.setState({categories: refreshedCts})\n            } catch (error) {\n                this.setState({ errors: {...this.state.errors, deleted: {[\"id\" + id]: error.response.data}}})\n            }\n\n        }\n    }\n\n    async componentDidMount() {\n        check()\n        const selectedLab = this.props.selectedLab\n        this.loadCategories(selectedLab)\n    }\n\n    async componentWillReceiveProps(nextProps){\n        const selectedLab = nextProps.selectedLab\n        this.loadCategories(selectedLab)\n    }\n\n\n    async loadCategories(selectedLab) {\n        if (selectedLab && JSON.stringify(selectedLab) !== \"{}\") {\n            try {\n                await axios.get(`/api/logged-in/chem-category/${selectedLab.value}`).then(result => this.setState({categories: result.data}))\n            } catch (error) {\n                console.log(\"error in get chem-categories: \" + error)\n                this.setState({ errors: {...this.state.errors, categoriesErrorStatus: error.response.status}})\n            }\n\n            console.log(\"in componentWillReceiveProps \" + JSON.stringify(selectedLab))\n            this.setState({selectedLab: selectedLab});\n        }\n    }\n\n        \n\n    render() {\n        const isAdmin = (this.props.selectedLab.key) && \n                        (this.props.user.labsAsAdmin.includes(this.props.selectedLab.value) || \n                        this.props.selectedLab.labManagers.map(manager => manager.username).includes(this.props.user.username))\n        return (\n            <div className=\"categories\">\n                <div className=\"container\">\n                    <div className=\"row\"> \n                        <div className=\"col-md-12\">\n                            <h1 className=\"display-4 text-center\">Chemical Categories</h1>\n                            <p className=\"lead text-center\">With the help of these categories, shelf lifes of the chemicals can be calculated, after opened</p>\n                            <br />\n                            { isAdmin && \n                                (<RedirectFormButton formRoute=\"/add-category\" buttonLabel=\"Add Category\"/>)\n                            }\n                            <br />\n                            <hr />\n                            {this.props.selectedLab.key ? \n                                this.getCards(isAdmin) :\n                                <p className=\"lead\"><i>Please select a lab</i></p>\n                            }\n                           \n                        </div>\n                    </div>\n                </div>\n            </div>\n        ) \n    }\n\n    getCards(isAdmin) {\n        return this.state.categories.map(category => (\n            <CategoryCard \n                lab={this.props.selectedLab}\n                isAdmin={isAdmin}\n                category={category} \n                key={category.id} \n                deleteCategory={this.deleteCategory} \n                errors={this.state.errors.deleted[\"id\" + category.id] ? this.state.errors.deleted[\"id\" + category.id] : {}}\n            />))\n    }\n}\n\nCategoryDashboard.propTypes = {\n    selectedLab: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    selectedLab: state.selectedLab,\n    user: state.security.user\n})\n\nexport default connect(mapStateToProps) (CategoryDashboard)\n\n","import React, { Component } from 'react'\nimport classNames from \"classnames\";\nimport axios from 'axios';\nimport PropTypes from \"prop-types\";\nimport { connect } from 'react-redux';\nimport Select from 'react-dropdown-select';\nimport { check, checkIfAdmin } from '../../utils/securityUtils';\n\nclass AddCategory extends Component {\n    constructor() {\n        super()\n        this.state = {\n            name: \"\",\n            amount: 0,\n            unit: \"\",\n            errors: {}\n        }\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.unitOnChanged = this.unitOnChanged.bind(this)\n        this.unitOptions = [\n            {\n                value: \"d\",\n                label: \"day\"\n            },\n            {\n                value: \"m\",\n                label: \"month\"\n            },\n            {\n                value: \"y\",\n                label: \"year\"\n            },\n        ]\n    }\n\n    componentWillReceiveProps(nextProps){\n        const selectedLab = nextProps.selectedLab\n        this.handleChange(selectedLab)\n    }\n\n    componentDidMount() {\n        const selectedLab = this.props.selectedLab\n        this.handleChange(selectedLab)\n    }\n\n    handleChange(selectedLab) {\n        check()\n        if (!checkIfAdmin(selectedLab, this.props.user)) {\n            this.props.history.push(\"/categories\")\n        } \n    }\n\n    unitOnChanged(justSelected) {\n        this.setState({unit: justSelected[0]})\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    async onSubmit(e) {\n        e.preventDefault()\n        const newCategory = {\n            labKey: this.props.selectedLab.key,\n            name: this.state.name,\n            amount: this.state.amount,\n            unit: this.state.unit.value,\n        }\n        try {\n            await axios.post('/api/lab-admin/chem-category', newCategory)\n            this.props.history.push(\"/categories\")\n        } catch(error) {\n            this.setState({errors: error.response.data})\n        }\n    }\n\n    render() {\n        const {errors} = this.state\n        return (\n            <div className=\"add-category\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                    \n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Add chemical category</h1>\n                            <p className=\"lead text-center\">Create a chemical category with shelf life for the given lab</p>\n                            <br/>\n                            {\n                                (errors.message && <h5 className=\"invalid-input\">{errors.message}</h5>)\n                            }\n                            {\n                                (errors.message && \n                                <div className=\"form-group row mb-3 invalid-feedback\">\n                                    {errors.message}\n                                </div>)\n                            }\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"name\" className=\"col-sm-4 col-form-label\">name</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"name\"\n                                            value={this.state.name}\n                                            onChange={this.onChange}\n                                            type=\"text\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.name})} \n                                            placeholder=\"chemical category name (e.g. salt)\" \n                                        />\n                                        {\n                                            (errors.name && <div className=\"invalid-feedback\">{errors.name}</div>)\n                                        }\n                                       \n                                    </div>\n                                </div>\n                                \n                                <div className=\"row\" >\n                                    <label htmlFor=\"amount\" className=\"col-sm-4 col-form-label\">shelf life</label>\n                                    \n                                    <div className=\"col-sm-4\">\n                                        <input \n                                            name=\"amount\"\n                                            value={this.state.amount}\n                                            onChange={this.onChange}\n                                            type=\"number\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.amount})} \n                                            placeholder=\"chemical category name (e.g. salt)\" \n                                        />\n                                    </div>\n                                    <div className=\"col-sm-4\">\n                                        <Select \n                                            name=\"amount\"\n                                            onChange={this.unitOnChanged}\n                                            options={this.unitOptions} \n                                            placeholder=\"unit\"\n                                            style={{height: \"42px\", fontSize: \"16px\"}}\n\n                                        />\n                                    </div>\n     \n                                </div>\n                                \n\n                                <button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Add Category</button>\n                                \n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nAddCategory.propTypes = {\n    selectedLab: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    selectedLab: state.selectedLab,\n    user: state.security.user\n})\n\nexport default connect(mapStateToProps) (AddCategory)\n","import axios from 'axios'\nimport classNames from 'classnames'\nimport React, { Component } from 'react'\nimport Select from 'react-dropdown-select'\nimport { connect } from 'react-redux'\nimport { getDays } from '../../utils/durationUtils'\nimport { check, checkIfAdmin } from '../../utils/securityUtils'\nimport PropTypes from \"prop-types\";\n\nclass UpdateCategory extends Component {\n    constructor() {\n        super()\n        this.state = {\n            name: \"\",            \n            amount: 0,\n            unit: \"\",\n            errors: {}\n        }\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.unitOnChanged = this.unitOnChanged.bind(this)\n        this.unitOptions = [\n            {\n                value: \"d\",\n                label: \"day\"\n            },\n            {\n                value: \"m\",\n                label: \"month\"\n            },\n            {\n                value: \"y\",\n                label: \"year\"\n            },\n        ]\n    }\n\n    componentWillReceiveProps(nextProps){\n        const selectedLab = nextProps.selectedLab\n        this.handleChange(selectedLab)\n    }\n\n    componentDidMount() {\n        const selectedLab = this.props.selectedLab\n        this.handleChange(selectedLab)\n    }\n\n    handleChange(selectedLab) {\n        check()\n        if (!checkIfAdmin(selectedLab, this.props.user)) {\n            this.props.history.push(\"/categories\")\n        } else {\n            axios.get(`/api/lab-admin/chem-category/${this.props.match.params.id}`).then(result => this.setState({\n                    name: result.data.name,\n                    amount: getDays(result.data.shelfLife),\n                    unit: \"d\"\n                } \n            ))\n        }\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    unitOnChanged(justSelected) {\n        this.setState({unit: justSelected[0].value})\n        \n    }\n\n    async onSubmit(e) {\n        check()\n        e.preventDefault()\n        const input = {\n            labKey: this.props.selectedLab.key,\n            name: this.state.name,\n            amount: this.state.amount,\n            unit: this.state.unit\n        }\n        try {\n            await axios.put(`/api/lab-admin/chem-category/${this.props.match.params.id}`, input)\n            this.props.history.push(\"/categories\")\n        } catch(error) {\n            this.setState({errors: error.response.data})\n        }\n    }\n    render() {\n        const {errors} = this.state\n        return (\n            <div className=\"update-chem-category\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                    \n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Update chemical category</h1>\n                            <p className=\"lead text-center\">Modify the category of the chemical</p>\n                            <br/>\n                            {\n                                (errors.message && <h5 className=\"invalid-input\">{errors.message}</h5>)\n                            }\n                            {\n                                (errors.message && \n                                <div className=\"form-group row mb-3 invalid-feedback\">\n                                    {errors.message}\n                                </div>)\n                            }\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group row mb-3\">\n                                    <label htmlFor=\"name\" className=\"col-sm-4 col-form-label\">name</label>\n                                    <div className=\"col-sm-8\">\n                                        <input \n                                            name=\"name\"\n                                            value={this.state.name}\n                                            onChange={this.onChange}\n                                            type=\"text\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.name})} \n                                            placeholder=\"name\" \n                                        />\n                                        {\n                                            (errors.name && <div className=\"invalid-feedback\">{errors.name}</div>)\n                                        }\n                                       \n                                    </div>\n                                </div>\n                                <div className=\"row\" >\n                                    <label htmlFor=\"amount\" className=\"col-sm-4 col-form-label\">shelf life</label>\n                                    \n                                    <div className=\"col-sm-4\">\n                                        <input \n                                            name=\"amount\"\n                                            value={this.state.amount}\n                                            onChange={this.onChange}\n                                            type=\"number\" \n                                            className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.amount})} \n                                            placeholder=\"chemical category name (e.g. salt)\" \n                                        />\n                                        {\n                                            (errors.amount && <div className=\"invalid-feedback\">{errors.amount}</div>)\n                                        }\n                                    </div>\n                                    <div className=\"col-sm-4\">\n                                        <Select \n                                            name=\"amount\"\n                                            values={[{value: \"d\", label: \"day\"}]}\n                                            onChange={this.unitOnChanged}\n                                            options={this.unitOptions} \n                                            placeholder=\"unit\"\n                                            style={{height: \"42px\", fontSize: \"16px\"}}\n                                        />\n                                    </div>\n     \n                                </div>\n                                <button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Update Category</button>\n                                \n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nUpdateCategory.propTypes = {\n    selectedLab: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    selectedLab: state.selectedLab,\n    user: state.security.user\n})\n\nexport default connect(mapStateToProps) (UpdateCategory)\n","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst LEFT_PAGE = \"LEFT\";\nconst RIGHT_PAGE = \"RIGHT\";\n\n/**\n * Helper method for creating a range of numbers\n * range(1, 5) => [1, 2, 3, 4, 5]\n */\nconst range = (from, to, step = 1) => {\n  let i = from;\n  const range = [];\n\n  while (i <= to) {\n    range.push(i);\n    i += step;\n  }\n\n  return range;\n};\n\n// PLEASE REFACTOR ME!!!!!!\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      currentPage: 1,\n     };\n  }\n\n  /**\n   * Let's say we have 10 pages and we set pageNeighbours to 2\n   * Given that the current page is 6\n   * The pagination control will look like the following:\n   *\n   * (1) < {4 5} [6] {7 8} > (10)\n   *\n   * (x) => terminal pages: first and last page(always visible)\n   * [x] => represents current page\n   * {...x} => represents page neighbours\n   */\n  fetchPageNumbers = () => {\n    const pageNeighbours =\n      typeof this.props.pageNeighbours === \"number\"\n        ? Math.max(0, Math.min(this.props.pageNeighbours, 2))\n        : 0;\n\n    const pageLimit = typeof this.props.pageLimit === \"number\" ? this.props.pageLimit : 30\n    const totalPages = Math.ceil(this.props.totalRecords / pageLimit);\n\n    const currentPage = this.state.currentPage;\n\n    /**\n     * totalNumbers: the total page numbers to show on the control\n     * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\n     */\n    const totalNumbers = pageNeighbours * 2 + 3;\n    const totalBlocks = totalNumbers + 2;\n\n    if (totalPages > totalBlocks) {\n      const startPage = Math.max(2, currentPage - pageNeighbours);\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\n      let pages = range(startPage, endPage);\n\n      /**\n       * hasLeftSpill: has hidden pages to the left\n       * hasRightSpill: has hidden pages to the right\n       * spillOffset: number of hidden pages either to the left or to the right\n       */\n      const hasLeftSpill = startPage > 2;\n      const hasRightSpill = totalPages - endPage > 1;\n      const spillOffset = totalNumbers - (pages.length + 1);\n\n      switch (true) {\n        // handle: (1) < {5 6} [7] {8 9} (10)\n        case hasLeftSpill && !hasRightSpill: {\n          const extraPages = range(startPage - spillOffset, startPage - 1);\n          pages = [LEFT_PAGE, ...extraPages, ...pages];\n          break;\n        }\n\n        // handle: (1) {2 3} [4] {5 6} > (10)\n        case !hasLeftSpill && hasRightSpill: {\n          const extraPages = range(endPage + 1, endPage + spillOffset);\n          pages = [...pages, ...extraPages, RIGHT_PAGE];\n          break;\n        }\n\n        // handle: (1) < {4 5} [6] {7 8} > (10)\n        case hasLeftSpill && hasRightSpill:\n        default: {\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n          break;\n        }\n      }\n\n      return [1, ...pages, totalPages];\n    }\n\n    return range(1, totalPages);\n  };\n\n  render() {\n    const pageLimit = typeof this.props.pageLimit === \"number\" ? this.props.pageLimit : 30\n    const totalPages = Math.ceil(this.props.totalRecords / pageLimit);\n\n    const currentPage = this.state.currentPage;\n\n    if (!this.props.totalRecords || totalPages === 1) return null;\n\n    const pages = this.fetchPageNumbers();\n\n    return (\n      <Fragment>\n        <nav aria-label=\"Countries Pagination\">\n          <ul className=\"pagination\">\n            {pages.map((page, index) => {\n              if (page === LEFT_PAGE)\n                return (\n                  <li key={index} className=\"page-item\">\n                    <button\n                      className=\"page-link\"\n                      aria-label=\"Previous\"\n                      onClick={this.handleMoveLeft}\n                    >\n                      <span aria-hidden=\"true\">&laquo;</span>\n                      <span className=\"sr-only\">Previous</span>\n                    </button>\n                  </li>\n                );\n\n              if (page === RIGHT_PAGE)\n                return (\n                  <li key={index} className=\"page-item\">\n                    <button\n                      className=\"page-link\"\n                      aria-label=\"Next\"\n                      onClick={this.handleMoveRight}\n                    >\n                      <span aria-hidden=\"true\">&raquo;</span>\n                      <span className=\"sr-only\">Next</span>\n                    </button>\n                  </li>\n                );\n\n              return (\n                <li\n                  key={index}\n                  className={`page-item${\n                    currentPage === page ? \" active\" : \"\"\n                  }`}\n                >\n                  <button\n                    className=\"page-link\"\n                    onClick={this.handleClick(page)}\n                  >\n                    {page}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>\n      </Fragment>\n    );\n  }\n\n  componentDidMount() {\n    this.gotoPage(1);\n  }\n\n  gotoPage = (page) => {\n    const pageLimit = typeof this.props.pageLimit === \"number\" ? this.props.pageLimit : 30\n    const totalPages = Math.ceil(this.props.totalRecords / pageLimit);\n    const { onPageChanged = (f) => f } = this.props;\n    const currentPage = Math.max(0, Math.min(page, totalPages));\n    const paginationData = {\n      currentPage,\n      totalPages: totalPages,\n      pageLimit: pageLimit,\n      totalRecords: this.props.totalRecords,\n    };\n\n    this.setState({ currentPage }, () => onPageChanged(paginationData));\n  };\n\n  handleClick = (page) => (evt) => {\n    this.gotoPage(page);\n  };\n\n  handleMoveLeft = (evt) => {\n    const pageNeighbours =\n    typeof this.props.pageNeighbours === \"number\"\n      ? Math.max(0, Math.min(this.props.pageNeighbours, 2))\n      : 0;\n    this.gotoPage(this.state.currentPage - pageNeighbours * 2 - 1);\n  };\n\n  handleMoveRight = (evt) => {\n    const pageNeighbours =\n    typeof this.props.pageNeighbours === \"number\"\n      ? Math.max(0, Math.min(this.props.pageNeighbours, 2))\n      : 0;\n    this.gotoPage(this.state.currentPage + pageNeighbours * 2 + 1);\n  };\n}\n\nPagination.propTypes = {\n  totalRecords: PropTypes.number.isRequired,\n  pageLimit: PropTypes.number,\n  pageNeighbours: PropTypes.number,\n  onPageChanged: PropTypes.func,\n};\n\nexport default Pagination;\n","export const isAvailable = chemItem => {\n    return !chemItem.consumptionDate && ! isExpired(chemItem)\n}\n\nexport const isExpired = chemItem => {\n    const expDate = new Date(chemItem.expirationDate)\n    const expDateBeforeOpened = new Date(chemItem.expirationDateBeforeOpened)\n    let today = new Date().setHours(0,0,0,0)\n    const expired = \n        expDateBeforeOpened < today ||\n        (chemItem.expirationDate && expDate < today )\n    return expired    \n}","import { Fragment } from \"react\"\nimport { createPortal } from \"react-dom\"\nimport classes from \"./Modal.module.css\"\n\nconst Backdrop = props => {\n    return (\n        <div onClick={props.onClick} className={classes.backdrop}></div>\n    )\n}\n\nconst ModalOverlay = props => {\n    return (\n        <div className={classes.modal}>\n            <div className={classes.content}>\n                {props.children}\n            </div>\n        </div>\n    )\n}\n\nconst portalElement = document.getElementById(\"overlays\")\n\nconst Modal = props => {\n    \n    return (\n        \n        <Fragment>\n            {createPortal(<Backdrop onClick={props.onClick}/>, portalElement)}\n            {createPortal( <ModalOverlay>{props.children}</ModalOverlay>, portalElement)}\n        </Fragment>\n    )\n}\n\nexport default Modal","import { Button } from \"@mui/material\"\nimport Modal from \"./Modal\"\nimport \"./VerifyPanel.css\"\n\nconst VerifyPanel = props => {\n    console.log(\"Inside VerifyPanel\")\n    return (\n        <Modal onClick={props.onCancel}>\n            <div className=\"message\">\n                {props.veryfyMessage} \n            </div>\n            <div className=\"button-container\">\n                <Button style={{marginRight: \"10px\"}} variant=\"contained\" onClick={props.onCancel}>{props.onSubmit ? \"Cancel\" : props.buttonLabel}</Button>\n                {props.onSubmit &&\n                    <Button  variant=\"contained\" onClick={props.onSubmit}>{props.buttonLabel}</Button>\n                }\n            </div>\n\n        </Modal>\n    )\n}\n\nexport default VerifyPanel","import { Button } from \"@mui/material\";\nimport { isExpired } from \"../../utils/chem-item-utils\";\n\nconst ChemItemFirstRow = props => {\n    const { chemItem, setActiveModal, getToggleProps } = props\n\n    const chemical = chemItem.chemical\n\n\n    const getOpenContent = chemItem => {\n        if (chemItem.openingDate) {\n            return (<div>{chemItem.openingDate}</div>)\n        } else if (isExpired(chemItem)) {\n            return (<div></div>)\n        } else {\n            return (\n                <Button onClick={() => setActiveModal(\"OPEN\")} className=\"btn action-button\" variant=\"outlined\" size=\"medium\">\n                    <i className=\"fas fa-external-link-square-alt\">Open</i>\n                    <i class=\"\"></i>\n                </Button>\n            )\n        }\n    }\n\n    const getConsumeContent = chemItem => {\n        if (!chemItem.openingDate && !isExpired(chemItem)) {\n            return (<div></div>)\n        } else if (chemItem.openingDate && !chemItem.consumptionDate) {\n            return (\n                <Button className=\"btn action-button\" color=\"warning\" variant=\"outlined\" size=\"medium\" onClick={() => setActiveModal(\"CONSUME\")}  >\n                    <i className=\"fas fa-check-double\">Consume</i>\n                </Button>)\n        } else {\n            return (<div>{chemItem.consumptionDate}</div>)\n        }\n    }\n\n    const getExpDate = chemItem => {\n        if (chemItem.expirationDate) {\n            return (<strong>{chemItem.expirationDate}</strong>)\n        }\n        return (<p>{chemItem.expirationDateBeforeOpened}</p>)\n    }\n\n    return (\n        <div className=\"row\"  {...getToggleProps()}>\n            <div className=\"col-2\">\n                <h4 className=\"mx-auto\">{chemical.shortName}</h4>\n            </div>\n            <div className=\"col-sm-1\">\n                <i>{chemItem.quantity} {chemItem.unit}</i>\n            </div>\n            <div className=\"col-1\">\n                <span className=\"mx-auto\">{chemItem.arrivalDate}</span>\n            </div>\n            <div className=\"col-sm-2\">\n                <p>{chemItem.manufacturer.name}</p>\n            </div>\n            <div className=\"col-sm-2\">\n                <p>{chemItem.batchNumber}/{chemItem.seqNumber}</p>\n            </div>\n            <div className=\"col-sm-1\">\n                {getExpDate(chemItem)}\n            </div>\n            <div className=\"col-sm-1\">\n                {getOpenContent(chemItem)}\n            </div>\n            <div className=\"col-sm-2\">\n                {getConsumeContent(chemItem)}\n            </div>\n        </div>\n    )\n}\n\nexport default ChemItemFirstRow","const ChemItemSecondRow = props => {\n    const { chemItem, getCollapseProps } = props\n    const chemical = chemItem.chemical\n    return (\n        <div {...getCollapseProps()}>\n            <div className=\"row content\" style={{padding: \"10px\"}}>\n                <div className=\"col-2\">\n                    <i className=\"mx-auto\">{chemical.exactName}</i>\n                </div>\n                <div className=\"col-sm-1\" />\n                    \n                <div className=\"col-1\">\n                    <i className=\"mx-auto\">by {chemItem.arrivedBy.fullName}</i>\n                </div>\n                <div className=\"col-sm-4\" />\n                <div className=\"col-sm-1\" />\n                <div className=\"col-sm-1\" >\n                    <i className=\"mx-auto\">{chemItem.openedBy && `by ${chemItem.openedBy.fullName}`}</i>\n                </div>\n                <div className=\"col-sm-1\" />\n                <div className=\"col-sm-1\" />\n            </div>\n        </div>\n    )\n}\n\nexport default ChemItemSecondRow","import DuButtons from \"../UI/DuButtons\";\n\nconst ChemItemThirdRow = props => {\n    const { chemItem, getCollapseProps, setActiveModal } = props\n    const chemical = chemItem.chemical\n\n    return (\n        <div {...getCollapseProps()}>\n            <div className=\"row content\" style={{padding: \"10px\"}}>\n                <div className=\"col-10\" />\n                    \n                <div className=\"col-sm-2\">\n                    <DuButtons \n                        updateFormTo={`/update-chem-item/${chemItem.id}`}\n                        onDelete={() => setActiveModal(\"DELETE\")}\n                    /> \n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ChemItemThirdRow","import axios from 'axios'\nimport React, { useState } from 'react'\nimport { isAvailable } from '../../utils/chem-item-utils'\nimport VerifyPanel from '../UI/VerifyPanel';\nimport \"./ChemItem.css\"\nimport useCollapse from 'react-collapsed';\nimport ChemItemFirstRow from './ChemItemFirstRow';\nimport ChemItemSecondRow from './ChemItemSecondRow';\nimport ChemItemThirdRow from './ChemItemThirdRow';\n \n\n  \n\nconst ChemItem = props => {\n    const [chemItem, setChemItem] = useState(props.chemItem)\n    const [activeModal, setActiveModal] = useState(\"\")\n    const { getCollapseProps, getToggleProps } = useCollapse();\n\n    const getVerifyMessage = action => {\n        return (\n            <div>\n                <p>{`Are you sure you want to ${action} `}<b>{chemItem.chemical.shortName}</b></p>\n                <p>(<b>{chemItem.manufacturer.name}</b>, <b>{`${chemItem.batchNumber}/${chemItem.seqNumber}`}</b>)</p>\n            </div>\n        )\n    }\n\n    const openChemItem = () => {\n        axios.patch(`/api/chem-item/open/${chemItem.id}`).then(result => setChemItem(result.data))\n        setActiveModal(\"\")\n    }\n\n    const consumeChemItem = () => {\n        axios.patch(`/api/chem-item/consume/${chemItem.id}`).then(result => setChemItem(result.data))\n        setActiveModal(\"\")\n    }\n\n    const deleteChemItem = () => {\n        props.deleteChemItem(chemItem.id)\n        setActiveModal(\"\")\n    }\n\n    const chemical = chemItem.chemical\n        \n    return (\n        <div className=\"container\">\n\n            <div className={`card card-body bg-light mb-2 chem-item ${isAvailable(chemItem) ? \"\" : \"unavailable\"}`}>\n                <ChemItemFirstRow \n                    chemItem={chemItem}\n                    setActiveModal={setActiveModal}\n                    isManager={props.isManager}\n                    getToggleProps={getToggleProps}\n                />\n                <ChemItemSecondRow \n                    chemItem={chemItem}\n                    getCollapseProps={getCollapseProps}\n                />\n                {props.isManager && (\n                    <ChemItemThirdRow \n                        chemItem={chemItem}\n                        setActiveModal={setActiveModal}\n                        getCollapseProps={getCollapseProps}\n                    />\n                )}\n\n            </div>\n            {activeModal === \"CONSUME\" && \n                <VerifyPanel \n                    onCancel={() => setActiveModal(\"\")} \n                    veryfyMessage={getVerifyMessage(\"consume\")}\n                    onSubmit={consumeChemItem}\n                    buttonLabel=\"Consume\"\n                />}\n            {activeModal === \"OPEN\" && \n                <VerifyPanel \n                    onCancel={() => setActiveModal(\"\")} \n                    veryfyMessage={getVerifyMessage(\"open\")}\n                    onSubmit={openChemItem}\n                    buttonLabel=\"Open\"\n                />}\n            {activeModal === \"DELETE\" && \n                <VerifyPanel \n                    onCancel={() => setActiveModal(\"\")} \n                    veryfyMessage={getVerifyMessage(\"delete\")}\n                    onSubmit={deleteChemItem}\n                    buttonLabel=\"Delete\"\n            />}\n        </div>\n    )   \n\n}\n\nexport default ChemItem \n","import React from 'react';\n\nexport default function ChemItemHeader() {\n    return (\n        <div className=\"container\">\n            <div className=\"bg-white mb-2\" style={{padding: \"2px\"}}>\n                <div className=\"row\" >\n                    <div className=\"col-2\">\n                        <h4 className=\"mx-auto\">chemical</h4>\n                    </div>\n                    <div className=\"col-sm-1\">\n                        <h4>quantity</h4>\n                    </div>\n                    <div className=\"col-1\">\n                        <h4 className=\"mx-auto\">arrival</h4>\n                    </div>\n                    <div className=\"col-sm-2\">\n                        <h4>manufacturer</h4>\n                    </div>\n                    <div className=\"col-sm-2\">\n                        <h4>batch nr / seq nr</h4>\n                    </div>\n                    <div className=\"col-sm-1\">\n                    <h4>exp date</h4>\n                    </div>\n                    <div className=\"col-sm-1\">\n                        <h4>open/ed</h4>\n                    </div>\n                    <div className=\"col-sm-1\">\n                        <h4>consume/d</h4>\n                    </div>\n                    <div className=\"col-sm-1\">\n                        <h4>admin</h4>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n","import React, { useEffect, useState } from 'react';\nimport Pagination from '../Pagination'\nimport ChemItem from './ChemItem'\nimport ChemItemHeader from './ChemItemHeader';\nimport \"./ChemItemDashboard.css\"\nimport { useSelector } from 'react-redux';\nimport { check } from '../../utils/securityUtils';\nimport axios from 'axios';\nimport RedirectFormButton from '../RedirectFormButton';\nimport VerifyPanel from '../UI/VerifyPanel';\nimport Select from 'react-dropdown-select';\n\nconst PAGE_LIMIT = 20\n\nfunction ChemItemDashboard() {\n    \n    const [ onlyAvailable, setOnlyAvailable] = useState(true)\n    const [ chemItems, setChemItems] = useState([])\n    const [ chemicals, setChemicals ] = useState([])\n    const [ chemical, setChemical ] = useState(\"\")\n    const [ currentPage, setCurrentPage] = useState(1)\n    const [ totalItems, setTotalItems] = useState(1)\n    const setTotalPages = useState(0)[1]\n    const [error, setError] = useState(\"\")\n    \n    const toggleOnlyAvailable = () => {\n        setOnlyAvailable(!onlyAvailable);\n    };\n\n    const loadChemItems = () => {\n        check()\n        onPageChanged({\n            currentPage: currentPage,\n            pageLimit: PAGE_LIMIT,\n            onlyAvailable: onlyAvailable\n        })\n    }\n\n    const selectedLab = useSelector((state) => state.selectedLab)\n    const user = useSelector((state) => state.security.user)\n\n    useEffect(() => {\n        if (selectedLab) {\n            axios.get(`/api/logged-in/chemical/${selectedLab.key}`)\n            .then(result => setChemicals(result.data))\n        }\n\n    }, [selectedLab])\n\n    useEffect(() => {\n        loadChemItems()\n    }, [selectedLab, onlyAvailable, chemical])\n\n    \n\n\n    const deleteChemItem = async id => {\n        try {\n            await axios.delete(`/api/chem-item/${id}`)\n            setChemItems(originalList => originalList.filter(chemItem => chemItem.id !== id))\n        } catch (error) {\n            setError(error.response.data.message)\n        }\n        \n    }\n\n    const onPageChanged = data => {\n        check()\n        const { currentPage, pageLimit } = data;\n        if (selectedLab && selectedLab.key && currentPage) {\n            const availableString = onlyAvailable ? \"&expired=false&consumed=false\" : \"\"\n            const cehmicalFilter = chemical ? `&chemicalId=${chemical.id}` : \"\"\n            axios.get(`/api/chem-item/${selectedLab.key}?page=${currentPage - 1}&size=${pageLimit}${availableString}${cehmicalFilter}`)\n                .then(result => {\n                    setCurrentPage(currentPage)\n                    setChemItems(result.data.content)\n                    setTotalItems(result.data.totalItems)\n                    setTotalPages(result.data.totalPages)\n                })\n        }\n    }\n\n    const handleChemicalChange = items => {\n        if (items[0]) {\n            setChemical(items[0])\n        } else {\n            setChemical(\"\")\n        } \n    }\n\n\n    const getChemItemContent = (totalItems) => {\n        if (!totalItems) {\n            return <p className=\"lead\"><i>There is no registered chemical for this lab so far</i></p>\n        }\n        return (\n            <div className=\"container mb-5\">\n                <div className=\"row d-flex flex-row py-0\">\n                    <div className=\"w-100 px-4 py-0 d-flex flex-row flex-wrap align-items-center justify-content-between\">\n                        \n                        <div className=\"col-sm-4 d-flex flex-row py-2 align-items-center\">\n                            <Pagination \n                                totalRecords={totalItems}\n                                pageLimit={PAGE_LIMIT} \n                                pageNeighbours={1}\n                                onPageChanged={onPageChanged}\n    \n                            />\n                            <div className=\"pad-chckbx\" >\n                                <input\n                                    type=\"checkbox\"\n                                    checked={onlyAvailable}\n                                    onChange={toggleOnlyAvailable}\n                                />\n                                <label className=\"pad-5\" >Only available</label>\n                                \n                            </div>\n                        \n                        </div>\n                        <div className=\"col-sm-8\">\n                        <Select\n                            options={chemicals}\n                            values={chemical ? [ chemical ] : []}\n                            labelField=\"shortName\"\n                            valueField=\"shortName\"\n                            placeholder=\"chemical\"\n                            searchable={true}\n                            clearable={true}\n                            style={{height: \"42px\", fontSize: \"16px\"}}\n                            onChange={handleChemicalChange}\n                        />\n                        </div>\n                    </div>\n                \n                    <ChemItemHeader />\n                    <hr />\n                    { chemItems.map(chemItem => \n                            <ChemItem\n                                isManager={isManager}\n                                key={chemItem.id}\n                                chemItem={chemItem}\n                                deleteChemItem={deleteChemItem}\n                            \n                            />\n                        ) \n                    }\n                </div>\n            </div>\n        )\n    }\n\n    const isManager =  (selectedLab.key) && selectedLab.labManagers.filter(manager => manager.username === user.username).length > 0\n    const isAdmin = (selectedLab.key) && (user.labsAsAdmin.includes(selectedLab.value) || isManager)\n\n    return (\n        <div className=\"projects\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h3 className=\"display-4 text-center\">Registered Chemicals</h3>\n                        {isAdmin && \n                            <RedirectFormButton formRoute=\"/add-chem-item\" buttonLabel=\"Register Chemical\"/>\n                        }\n                        <hr />\n                        {selectedLab.key ? \n                            getChemItemContent(totalItems) :\n                            <p className=\"lead\"><i>Please select a lab</i></p>\n                        }\n                        {error && \n                            <VerifyPanel \n                                onCancel={() => setError(\"\")} \n                                veryfyMessage={error}\n                                buttonLabel=\"Ok\"\n                            />}\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n    \n    \n}\n\nexport default ChemItemDashboard\n","import \"./UserManual.css\"\nconst UserManual = () => {\n    return (\n        <div className=\"body\">\n            <h1>chemstore User Manual</h1>\n            <br/>\n            <br/>\n            <h2>Purpose</h2>\n            <p>\n                The purpose of this web application is to ease the burden of the registration and administration of chemicals and mixtures made from them.\n                While it provides a straightforward interface, it complies the highest industrial quality assurance standards.\n                It implements fine grained authorization, detailed audit logging (in progress) and every operation is highly controlled.   \n             </p>\n             <br/>\n             <br/>\n             <h2>Demo</h2>\n             <br/>\n             <p>\n                 The purpose of the demo instance is to give anyone a chance to try the features of the application.\n                 The data in the demo app is 100 % made up, the loss of it makes no harm to anyone, it is backed up (saved).\n                 The data have been set up a way, that covers many use cases, in the point of view of the application.\n                 Thus, it is recommended to take a look, before starting any modification in the system (update, delete etc.).\n                 Modifications are crucial part of the application. Each and every modification feature is available in the demo application, \n                 to get to know the behaviour of it perfectly.\n                 However, these modifications change the initial data, so the bigger the changes, the bigger the difference from the initial demo data. \n                 That's why it is encouraged to create new entities (chemicals, labs, users, etc), test the features of the app with them, \n                 and make modifications on them. \n                 However, the initial demo data is backed up, and periodically being restored. So no worry to mess up something.\n                 The only strong request is that please don't corrupt/delete/ruin the data on purpose! \n                 It will only makes the next person annoyed, who wants to try the app. \n             </p>\n             <p>\n                Keep it in mind, that the data in the demo app is restored in some time (means the previous data is lost forever), so <b>IT CAN NOT BE USED IN PRODUCTION</b>. \n                The operator of the chemstore demo application doesn't bear any responsibility for the data in the application \n                (provided by user or the initial data) and doesn't bear any responsibility for the availability of the demo application.  \n             </p>\n             <h3>Demo Credentials</h3>\n             <p>\n                In the demo app, each username ends with <code>@account.com</code>. The default password is the the username before the <code>@</code> symbol. \n                For example you can login as 'Strong Admin' with the following credentials: username:'strongadmin@account.com', password:'strongadmin'</p>\n                Or with 'Alpha Lab User' with 'alabuser@account.com' and 'alabuser'.\n                There are many users in the system. You can check them under 'Users' point. The username is in the first column. \n                With one exception, each password is the default password (username before @ symbol).\n                You can choose between many users, who are assinged to different labs, with different roles. \n                For the different users, different featues are available depends on which role do they have and for which labs. \n\n             <br/>\n             <br/>\n            <h2>Roles</h2>\n            <br/>\n\n            <h3>User</h3>\n            <br/>\n            <p>\n                A User is typically a technician, whose daily work is to use the chemicals and make mixtures (e.g. eluents) out of it, \n                without additional admin role.\n            </p>\n            <p>\n                A User can see the every laboratory and User in the system (account), but he/she cannot modify these. \n            </p>\n            <p>\n                A User can be assigned to one or more laboratories (labs) by the Account Manager (see below). He/she can open and consume chemicals (chem items) in these labs.\n                A User can see the chemicals and the chemical categories in each assigned lab, but cannot modify these.\n            </p>\n            <p>\n                A User can choose from the dropdown list found in the right header, which laboratory he/she would like to act.\n                E.g. in which lab he/she would like to open a certain chemical.\n            </p>\n            <p>\n                A User can change his/her password, and can log out.\n            </p>\n\n\n\n\n\n            <h3>Lab Admin</h3>\n            <br/>\n            <p>\n                The Lab Admin is typically an employee, whose responsibility is to administrate the everyday life of the laboratory in the application. \n                The Lab Admin registers the shipped chemicals, and administrates the related records. \n                A Lab Admin has all the User permissions by default (for the assigned labs), plus some extra detailed below. \n                \n            </p>\n            \n            <p>\n                A Lab Admin can be assigned to one or more laboratories (labs) by the Account Manager. \n                If an employee is assigned to a lab as Lab Admin, it is not required to assign him/her as user to the same lab. \n                Besides opening and consuming chemicals (chem items), he/she can add new chem items to the lab.\n            </p>\n            <p>A Lab Admin can add, modify and delete (archive) chemicals and chemical categories, for the lab he/she administrates.</p>\n            <p>A Lab Admin can add, modify and delete (archive) manufacturers throughout the whole system (account).</p>\n            \n            \n            \n            <h3>Lab Manager</h3>\n            <br/>\n            <p>\n                The Lab Manager is typically the leader or the deputy leader of the laboratory, or the some kind of responsible person (e.g. quality assurer).\n                It is usually the Lab Manager, who is responsible the whole laboratory, especially in the aspect of quality assurance.\n                Only the Lab Manager has the authority to perform quality assurance critical modifications (e.g. deleting a chem item). \n                Of course, these modifications are registered to the unmodifiable audit log (see below). \n                \n            </p>\n            <p>\n                A Lab Manager can be assigned to one or more laboratories (labs) by the Account Manager.\n                It is advisable to have more lab managers for one laboratory!\n                If an employee is assigned to a lab as Lab Manager, it is not required to assign him/her as a Lab Admin or as a user to the same lab. \n                A Lab Manager has all permissions as the Lab Admin by default, plus some extra detailed below. \n\n            </p>\n            <p>The Lab Manager can modify (in progress) and delete chem items from the system (hard delete).</p>\n            <p>The Lab Manager can assign employees to the lab as 'users' or 'lab admins' (in progess).</p>\n\n\n            <h3>Account Manager</h3>\n            <br/>\n            <p>\n                The Account Manager is an employee, who is responsible for the application in a high level. \n                He/she registers laboratories, users etc, but he/she is not typically a User or Admin of the lab. \n                For example, Account Manager can be IT system admin, a higher level leader or quality assurer.\n\n            </p>\n            <p>\n                Account admin can create, modify and delete labs and users. \n                He/she can assign the employees to the labs as users and/or lab admins. He/she can modify the managers of the labs.\n            </p>\n            <p>\n                He/she can restore the password of the users.\n            </p>\n            <br/>\n            <br/>\n            <h2>Entities</h2>\n            <br/>\n            <h3>User</h3>\n            <p>\n                User is an employee of the company/account. \n                Users can be added to the system by the Account Manager. \n                The User is created by a default password (the username before the @ symbol).\n                The User must change this password at the first login.\n                He/she can be assigned to different labs accross the system by an Account Manager or a Lab Manager (in progress). \n                Each operation can be performed only after the login. Each quality critical operation is logged in audit log (in progress).\n            </p>\n            <br/>\n            <h3>Lab</h3>\n            <p>\n                Lab is a laboratory of the company/account. There can be one or more Lab in the system/account.\n                Labs can be added to the system by an Account Manager. One manager of the lab is mandatory. \n                Only the Account Manager can modify the attributes (name, manager) of the labs.\n                Lab is one of the most important entity in the application, many entity is linked to it (eg chemical, chem item).\n            </p>\n            <br/>\n            <h3>Manufacturer</h3>\n            <p>\n                Manufacturers are common throughout the whole company/account. \n                This means a manufacturer that is added for lab1, can be used for lab2.\n            </p>\n            <br/>\n            <h3>(Chemical) Category</h3>\n            <p>\n                The purpose of (Chemical) Category is to group different chemicals together based on the same shelf life of the chemicals \n                (expiration time, after opening). \n                E.g. ACN and MeOH (chemicals) are both organic solvents (category). \n                We can set an expiration time for organic solvent category (e.g. '90 days after opening'), and it would be applied for each \n                organic solvent chemical (ACN and MeOH). \n                (Chemical) Categories are linked to a specific lab. \n                This means a category that is added for lab1, can't be used for lab2. \n                Of course the very same category can be added for lab2 too, but it must keep it mind that those two are different entites.\n                \n            </p>\n            <br/>\n            <h3>Chemical</h3>\n            <p>\n                A chemical entity represents a certain type (not a concrete bottle) of chemical. \n            </p>\n            <br/>\n            <h3>Chem Item</h3>\n            <p>\n                A chem item represents a concrete packaged (bottle or box of) chemical, that can (or could) be found in the laboratory, \n                with an exact manufacturer, batch number, volume etc. \n                One of the main features of the app is the administration of the status of the chem items through the time.\n            </p>\n            <p>\n                A chem item is shipped to the lab, and the Lab Admin or the Lab Manager registers it. \n                The registered chem item can only be used after someone opened it. \n                When opened, an expiration date is calculated based on the defined category (if any) AND the manufacturer expiration date. \n                If no category is provided, the expiration date will be the same as the manufacturer expiration date. \n                If category is provided, the expiration date will be the lesser value between the calculated expiration date and \n                the manufacturer expiration date.\n                The calculated expiration date equals the current date (when opened) plus the shelf life given in the related category. \n                When a chem item is consumed, this must be registered in the application too, to prevent the usage of this chemical any longer by mistake. \n                <b> Only opened, not consumed and not expired chem items can be used for the creation of mixtures and eluents!</b>\n            </p>\n            <p> \n                The chem items in the lab can be listed under the 'Chem items' tab. \n                Automatically, it will show the 'available' chem items, meaning the ones that are not consumed or expired. \n                If the 'Only available' is unchecked, each chem item is viewable. \n                A registered chem item cannot be modified, because many attributes are automatically calculated \n                (e.g. expiration date or who registered it) (This will change in the future. \n                If a chem item registered with bad data, the Lab Manager can delete the incorrect record, and add a new one with the correct data.\n\n            </p>\n            <p>\n                Lab manager or Lab Admin can register chem items with the following data (each required):\n            </p>\n\n            <ul>\n                <li><b>chemical:</b> The type of the chem item (pre registered under 'Chemicals')</li>\n                <li><b>manufacturer:</b> The manufacturer of the chem item (pre registered under 'Manufacturers')</li>\n                <li><b>batch number:</b> The batch number (or lot number) of the chem item (free text)</li>\n                <li><b>quantity:</b> The quantity of packaging, volume or mass (number)</li>\n                <li><b>unit:</b> The unit of the quantity (one from the fixed list)</li>\n                <li><b>amount:</b> How many bottles/boxes are to register (number)</li>\n                <li><b>Expiration date (before opened):</b> The expiration date, given by manufacturer, without opening</li>\n                <li><b>Arrival date: </b>When the chem item is arived/registered in the lab</li>\n            </ul>\n\n        </div>\n        \n        \n    )\n}\n\nexport default UserManual","import { useState } from \"react\"\nimport DuButtons from \"../UI/DuButtons\"\nimport VerifyPanel from \"../UI/VerifyPanel\"\n\nconst ProjectCard = props => {\n    const project = props.project\n\n    const [deletionConfirmation, setDeletionConfirmation] = useState(false)\n\n    return (\n        <div className=\"card card-body bg-light mb-3\" style={{padding: \"10px\"}}>\n            <div className=\"row\" >\n                <div className=\"col-sm-9\">\n                    <h4>{project.name}</h4>\n                </div>\n                \n                <div className=\"col-sm-3\">\n                    { props.isManager && \n                        <DuButtons \n                            updateFormTo={`/update-project/${project.id}`}\n                            onDelete={() => setDeletionConfirmation(true)}\n                        /> \n                        \n                    }\n                </div>\n            </div>\n            {deletionConfirmation && \n                <VerifyPanel \n                    onCancel={() => setDeletionConfirmation(false)} \n                    veryfyMessage={`Are you sure you want to delete project ${project.name}?`}\n                    onSubmit={() => props.deleteProject(project.id)}\n                    buttonLabel=\"Delete\"\n                />}\n        </div>\n    )\n    \n}\n\nexport default ProjectCard\n\n    \n","import axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { check } from '../../utils/securityUtils'\nimport RedirectFormButton from '../RedirectFormButton'\nimport ProjectCard from './ProjectCard'\n\nfunction ProjectDashboard() {\n\n    const [projects, setProjects] = useState([])\n\n    const selectedLab = useSelector((state) => state.selectedLab)\n    const user = useSelector((state) => state.security.user)\n\n    useEffect(() => {\n        if (selectedLab) {\n            check()\n            axios.get(`/api/logged-in/project/${selectedLab.key}`).then(result => {setProjects(result.data)})\n        }\n        \n    }, [selectedLab])\n    \n    const isManager =  (selectedLab.key) && selectedLab.labManagers.filter(manager => manager.username === user.username).length > 0\n\n    const deleteProject = async id => {\n        await axios.delete(`/api/lab-manager/project/${id}`)\n        setProjects(originalList => originalList.filter(project => project.id !== id))\n    }\n\n    const getProjectDashboardContent = () => {\n        if (!projects) {\n            return <p className=\"lead\"><i>There is no registered project for this lab so far</i></p>\n        }\n        return (\n        <div>\n            {projects.map(project => (\n                <ProjectCard \n                    key={project.id}\n                    project={project}\n                    isManager={isManager}\n                    deleteProject={deleteProject}\n                />\n                ))\n            }\n        </div>)\n        \n    }\n\n    return (\n        <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h3 className=\"display-4 text-center\">Projects</h3>\n                        <p className=\"lead text-center\">List {isManager ? \" and manage\" : \"\"} the projects for {selectedLab.name}</p>\n                        <br/>\n                        {isManager && \n                            <RedirectFormButton formRoute=\"/add-project\" buttonLabel=\"Add Project\"/>\n                        }\n                        <hr />\n                        {selectedLab.key ? \n                            getProjectDashboardContent() :\n                            <p className=\"lead\"><i>Please select a lab</i></p>\n                        }\n\n                    </div>\n                </div>\n            </div>\n    )\n}\n\nexport default ProjectDashboard\n","import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useState } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { check, checkIfManager } from \"../../utils/securityUtils\"\n\nconst AddProject = props => {\n    const [name, setName] = useState(\"\")\n    const [error, setError] = useState(\"\")\n    \n    \n    const selectedLab = useSelector((state) => state.selectedLab)\n    const user = useSelector((state) => state.security.user)\n\n    useEffect(() => {\n        if (selectedLab) {\n            check()\n            if (!checkIfManager(selectedLab, user)) {\n                this.props.history.push(\"/projects\")\n            }\n        }\n        \n    }, [selectedLab, user])\n\n    const onSubmit = async (event) => {\n        event.preventDefault()\n        const newProject = {\n            name: name,\n            labKey: selectedLab.key\n        }\n        try {\n            await axios.post('/api/lab-manager/project', newProject)\n            props.history.push(\"/projects\")\n        } catch(error) {\n            setError(error.response.data)\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-8 m-auto\">\n                    <h1 className=\"display-4 text-center\">Add Project</h1>\n                    <p className=\"lead text-center\">Add a project for {selectedLab.name}</p>\n                    <br/>\n                    {\n                        (error.message && <h5 className=\"invalid-input\">{error.message}</h5>)\n                    }\n                    <form onSubmit={onSubmit}>\n                        <div className=\"form-group row mb-3\">\n                            <label htmlFor=\"username\" className=\"col-sm-4 col-form-label\">name</label>\n                            <div className=\"col-sm-8\">\n                                <input \n                                    name=\"name\"\n                                    value={name}\n                                    onChange={event => setName(event.target.value)}\n                                    type=\"text\" \n                                    className={classNames(\"form-control form-control-lg\", {\"is-invalid\": error.name})} \n                                    placeholder=\"project name\" \n                                />\n                                {\n                                    (error.name && <div className=\"invalid-feedback\">{error.name}</div>)\n                                }\n                                \n                            </div>\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Add Project</button>\n                        \n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default AddProject","import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useState } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { check, checkIfManager } from \"../../utils/securityUtils\"\n\nconst UpdateProject = props => {\n    const [name, setName] = useState(\"\")\n    const [error, setError] = useState(\"\")\n    const [project, setProject] = useState(\"\")\n    \n    \n    const selectedLab = useSelector((state) => state.selectedLab)\n    const user = useSelector((state) => state.security.user)\n    const id = props.match.params.id\n\n    useEffect(() => {\n        if (selectedLab) {\n            check()\n            if (!checkIfManager(selectedLab, user)) {\n                props.history.push(\"/projects\")\n            }\n        }\n        \n    }, [selectedLab, user, props.history])\n\n    useEffect( () => {\n        axios.get(`/api/lab-manager/project/${id}`).then(result => {\n            setProject(result.data)\n            setName(result.data.name)\n        })\n    }, [])\n\n\n    const onSubmit = async (event) => {\n        event.preventDefault()\n        const input = {\n            name: name,\n            labKey: selectedLab.key\n        }\n        try {\n            await axios.put(`/api/lab-manager/project/${id}`, input)\n            props.history.push(\"/projects\")\n        } catch(error) {\n            setError(error.response.data)\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-8 m-auto\">\n                    <h1 className=\"display-4 text-center\">Update Project</h1>\n                    <p className=\"lead text-center\">Update {project.name}</p>\n                    <br/>\n                    {\n                        (error.message && <h5 className=\"invalid-input\">{error.message}</h5>)\n                    }\n                    <form onSubmit={onSubmit}>\n                        <div className=\"form-group row mb-3\">\n                            <label htmlFor=\"username\" className=\"col-sm-4 col-form-label\">name</label>\n                            <div className=\"col-sm-8\">\n                                <input \n                                    name=\"name\"\n                                    value={name}\n                                    onChange={event => setName(event.target.value)}\n                                    type=\"text\" \n                                    className={classNames(\"form-control form-control-lg\", {\"is-invalid\": error.name})} \n                                    placeholder=\"project name\" \n                                />\n                                {\n                                    (error.name && <div className=\"invalid-feedback\">{error.name}</div>)\n                                }\n                                \n                            </div>\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Update Project</button>\n                        \n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default UpdateProject","const IngredientRow = props => {\n    const row = props.row\n    const ingredient = row.ingredient\n    return (\n        <li>\n            <div className=\"row\" >\n                <div className=\"col-sm-1\">\n                    <i>{row.amount} {row.unit}</i>\n                </div>\n                <div className=\"col-4\">\n                    <span className=\"mx-auto\">{ingredient.shortName ? ingredient.shortName : ingredient.name}</span>\n                </div>\n                \n                   \n\n                </div>  \n        </li>\n\n    )\n}\n\nexport default IngredientRow","import React, { useState } from 'react'\nimport useCollapse from 'react-collapsed';\nimport DuButtons from '../UI/DuButtons';\nimport VerifyPanel from '../UI/VerifyPanel';\nimport IngredientRow from './IngredientRow';\nimport \"./RecipeCard.css\"\n\nconst RecipeCard = props => {\n    const recipe = useState(props.recipe)[0]\n    const [deletionConfirmation, setDeletionConfirmation] = useState(false)\n\n    const { getCollapseProps, getToggleProps } = useCollapse();\n        \n    return (\n           <div className=\"container card card-body bg-light mb-3\" style={{padding: \"10px\"}}>\n                <div className=\"header row\" {...getToggleProps()}>\n\n                    <div className=\"col-4\">\n                        <h4 className=\"mx-auto\">{recipe.name}</h4>\n                    </div>\n                    <div className=\"col-sm-1\">\n                        <i>{recipe.amount} {recipe.unit}</i>\n                    </div>\n                    <div className=\"col-sm-1\">\n                        <i>{recipe.shelfLifeInDays} day{recipe.shelfLifeInDays > 1 ? \"s\" : \"\"}</i>\n                    </div>\n                    <div className=\"col-3\" />  \n                    <div className=\"col-sm-3\">\n                        { props.isManager && \n                            <DuButtons \n                                updateDisabled={true}\n                                updateFormTo={`/update-recipe/${recipe.id}`}\n                                onDelete={() => setDeletionConfirmation(true)}\n                            /> \n                            \n                        }\n                    </div>\n\n                </div>\n                <div {...getCollapseProps()}>\n                    <div className=\"content\" style={{padding: \"10px\"}}>\n                        {(recipe.chemicalIngredients.length > 0  && \n                        <div>\n                            <p><strong>Chemical Ingredients</strong></p>\n                            <ul>\n                            {recipe.chemicalIngredients.map(ing => <IngredientRow key={ing.id} row={ing} />)}\n                            </ul>\n                        </div>\n                        )}\n                        {(recipe.recipeIngredients.length > 0  && \n                        <div><p><strong>Recipe Ingredients</strong></p>\n                            <ul>\n                                {recipe.recipeIngredients.map(ing => <IngredientRow key={ing.id} row={ing} />)}\n                            </ul>\n                        </div>\n                        )}\n                    </div>\n                    {deletionConfirmation && \n                        <VerifyPanel \n                            onCancel={() => setDeletionConfirmation(false)} \n                            veryfyMessage={`Are you sure you want to delete recipe ${recipe.name}?`}\n                            onSubmit={() => props.deleteRecipe(recipe.id)}\n                            buttonLabel=\"Delete\"\n                        />\n                    }\n                </div>\n\n           </div>\n\n    )\n\n}\n\nexport default RecipeCard \n","import axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport Select from 'react-dropdown-select'\nimport { useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { check } from '../../utils/securityUtils'\nimport RedirectFormButton from '../RedirectFormButton'\nimport VerifyPanel from '../UI/VerifyPanel'\nimport RecipeCard from './RecipeCard'\n\nconst RecipeDashboard = props => {\n    const location = useLocation()\n\n    const [projects, setProjects] = useState([])\n    const [recipes, setRecipes] = useState([])\n    const [selectedProject, setSelectedProject] = useState(\"\")\n    const [justAddedRecipe, setJustAddedRecipe] = useState(location.state ? location.state.detail.justAddedRecipe : \"\")\n\n    const selectedLab = useSelector((state) => state.selectedLab)\n    const user = useSelector((state) => state.security.user)\n        \n    useEffect(() => {\n         if (selectedLab) {\n            check()\n            if (location.state) {\n                setSelectedProject(location.state.detail.selectedProject)\n            } else {\n                setSelectedProject(\"\")\n            }\n            axios.get(`/api/logged-in/project/${selectedLab.key}`).then(result => {setProjects(result.data)})\n        }\n        \n    }, [selectedLab])\n\n\n    useEffect(() => {\n        if (selectedProject) {\n            check()\n            axios.get(`/api/logged-in/recipe/${selectedProject.id}`).then(result => {setRecipes(result.data)})\n        }\n        \n    }, [selectedProject])\n    \n    const isManager =  (selectedLab.key) && selectedLab.labManagers.filter(manager => manager.username === user.username).length > 0\n\n    const getProjectDashboardContent = () => recipes.map(recipe => \n            <RecipeCard \n                key={recipe.id} \n                recipe={recipe} \n                isManager={isManager}\n                deleteRecipe={deleteRecipe}\n                />)\n\n    const handleProjectDropdownChange = items => {\n        const selectedProject = items[0]\n        if (selectedProject) {\n            setSelectedProject(selectedProject)\n        }\n    }\n\n    const deleteRecipe = async recipeId => {\n        await axios.delete(`/api/lab-manager/recipe/${recipeId}`)\n        setRecipes(originalList => originalList.filter(recipe => recipe.id !== recipeId))\n    }\n\n\n    return (      \n        <div className=\"container col-md-12\">\n            <h3 className=\"display-4 text-center\">Recipes</h3>\n            <p className=\"lead text-center\">List {isManager ? \" and manage\" : \"\"} the recipes of {selectedLab.name}</p>\n            <br/>\n            {isManager && \n                <RedirectFormButton \n                    objectToPass={{formRoute:\"/add-recipe\", selectedProject: selectedProject}} \n                    buttonLabel=\"Add Recipe\"\n                />\n            }\n            <hr />\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"chemical\" className=\"col-sm-2 col-form-label\">project</label>\n                <div className=\"col-sm-10\">\n                    <Select\n                        options={projects}\n                        values={projects.filter(project => selectedProject && (project.id === selectedProject.id))}\n                        labelField=\"name\"\n                        valueField=\"name\"\n                        placeholder=\"project\"\n                        searchable={false}\n                        clearable={false}\n                        style={{height: \"42px\", fontSize: \"16px\"}}\n                        onChange={handleProjectDropdownChange}\n                    />\n                </div>\n            </div>\n\n            {selectedLab.key && selectedProject? \n                getProjectDashboardContent() :\n                <p className=\"lead\"><i>Please select a recipe</i></p>\n            }\n        </div>\n    )\n}\n\nexport default RecipeDashboard\n","import classNames from \"classnames\"\nimport Select from \"react-dropdown-select\"\n\nconst IngredientInputRow = props => {\n    const { \n        label,\n        units, \n        entities, \n        ingredient, \n        ingredients, \n        setIngredients, \n        handleOnRemove,\n        isLast } = props\n    \n    const updateListItemAttribute = (key, value) => {\n        const updated = ({...ingredient})\n        updated[key] = value\n        const updatedList = ingredients.map(item => item.nr === ingredient.nr ? updated : item)\n        setIngredients(updatedList)\n    }\n    \n    return(\n        <div className=\"form-group row mb-3\" >\n            <div className=\"col-sm-6\" >\n                <Select\n                    options={entities}\n                    values={ingredient.ingredient ? [ingredient.ingredient] : []}\n                    labelField={label}\n                    valueField=\"id\"\n                    placeholder=\"ingredient\"\n                    searchable={false}\n                    clearable={false}\n                    style={{height: \"42px\", fontSize: \"16px\"}}\n                    className={classNames(\"form-control form-control-lg\", {\"is-invalid\": !isLast && !ingredient.ingredient})} \n                    onChange={items => updateListItemAttribute(\"ingredient\", items[0])}\n                />\n            </div>\n            <div className=\"col-sm-2\" >\n                <input \n                    name=\"amount\"\n                    value={ingredient.amount}\n                    onChange={event =>  updateListItemAttribute(\"amount\", parseFloat(event.target.value))}\n                    type=\"number\" \n                    step=\"0.001\"\n                    min=\"0.001\"\n                    className={classNames(\"form-control form-control-lg\", {\"is-invalid\": !isLast && !ingredient.amount})} \n                    placeholder=\"amount\" \n                />\n            </div>\n            <div className=\"col-sm-2\">\n                <Select\n                    options={units}\n                    values={[{unit: ingredient.unit}]}\n                    labelField=\"unit\"\n                    placeholder=\"unit\"\n                    valueField=\"unit\"\n                    searchable={false}\n                    clearable={false}\n                    style={{height: \"42px\", fontSize: \"16px\"}}\n                    className={classNames(\"form-control form-control-lg\", {\"is-invalid\": !isLast && !ingredient.unit})} \n                    onChange={items => items[0] && updateListItemAttribute(\"unit\", items[0].unit)}\n                />\n            </div>\n            <div className=\"col-sm-2\">\n                {!isLast && \n                    <button \n                        onClick={() => handleOnRemove(ingredient.nr)}\n                        className=\"btn btn-outline-danger\" \n                        style={{height: \"42px\", fontSize: \"16px\"}}>\n                        <i className=\"fas fa-times-circle\"></i>\n                    </button>\n                }\n                \n            </div>\n        </div>\n    )\n}\n\nexport default IngredientInputRow","import axios from \"axios\"\nimport { useEffect, useState } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport IngredientInputRow from \"./IngredientInputRow\"\n\nconst IngredientInputs = props => {\n    \n    const selectedLab = useSelector(state => state.selectedLab)\n\n    const { \n        projectId,\n        chemicalIngredients, \n        setChemicalIngredients, \n        recipeIngredients, \n        setRecipeIngredients, \n        units, \n        handleChemicalOnRemove, \n        handleRecipeOnRemove } = props\n\n    const [ chemicals, setChemicals ] = useState([])\n    const [ availableChemicals, setAvailableChemicals ] = useState([])\n\n    const [ recipes, setRecipes ] = useState([])\n    const [ availableRecipes, setAvailableRecipes ] = useState([])\n\n    useEffect( () => {\n        axios.get(`/api/logged-in/chemical/${selectedLab.key}`).then(result => setChemicals(result.data))\n        axios.get(`/api/logged-in/recipe/${projectId}`).then(result => setRecipes(result.data))\n    }, [projectId, selectedLab])\n\n    \t\n    useEffect(() => {\n        const usedChemicalIds = chemicalIngredients.map(ingredient => ingredient.ingredient && ingredient.ingredient.id)\n        setAvailableChemicals(chemicals.filter(chemical => !usedChemicalIds.includes(chemical.id)))\n    }, [chemicalIngredients, chemicals])\n\n    useEffect(() => {\n        const usedRecipeIds = recipeIngredients.map(ingredient => ingredient.ingredient && ingredient.ingredient.id)\n        setAvailableRecipes(recipes.filter(recipe => !usedRecipeIds.includes(recipe.id)))\n    }, [recipeIngredients, recipes])\n\n    \n    return(\n        <div>\n            <h3 className=\"display-8\">Chemical ingredients</h3>\n            {chemicalIngredients.map((chemicalIngredient, index) => \n                <IngredientInputRow \n                    key={chemicalIngredient.nr}\n                    label={\"shortName\"} \n                    ingredient={chemicalIngredient} \n                    ingredients={chemicalIngredients}\n                    setIngredients={setChemicalIngredients} \n                    entities={availableChemicals} \n                    handleOnRemove={handleChemicalOnRemove} \n                    units={units}\n                    isLast={chemicalIngredients.length - 1 === index}\n                    />\n\n            )}\n            <h3 className=\"display-8\">Recipe ingredients</h3>\n            {recipeIngredients.map((recipeIngredient, index) => \n                <IngredientInputRow \n                    key={recipeIngredient.nr}\n                    label={\"name\"} \n                    ingredient={recipeIngredient} \n                    ingredients={recipeIngredients}\n                    setIngredients={setRecipeIngredients} \n                    entities={availableRecipes} \n                    handleOnRemove={handleRecipeOnRemove} \n                    units={units}\n                    isLast={recipeIngredients.length - 1 === index}\n                    />\n\n            )}\n        </div>\n    )\n}\n\nexport default IngredientInputs","import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useState } from \"react\"\nimport Select from \"react-dropdown-select\"\nimport { useSelector } from \"react-redux\"\n\nconst RecipeCoreForm = props => {\n    const { \n        isUpdate,\n        units, \n        errors,\n        selectedProject, setSelectedProject,\n        name, setName,\n        amount, setAmount,\n        unit, setUnit,\n        shelfLifeInDays, setShelfLifeInDays\n    } = props \n    const [projects, setProjects] = useState([])\n\n    const selectedLab = useSelector((state) => state.selectedLab)\n\n\n    useEffect(() => {\n        axios.get(`/api/logged-in/project/${selectedLab.key}`).then(result => {setProjects(result.data)})\n    }, [])\n\n    return (\n        <div>\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"project\" className=\"col-sm-2 col-form-label\">project</label>\n                <div className=\"col-sm-10\">\n                    <Select\n                        disabled={isUpdate}\n                        options={projects}\n                        values={projects.filter(project => selectedProject && (project.id === selectedProject.id))}\n                        labelField=\"name\"\n                        valueField=\"name\"\n                        placeholder=\"project\"\n                        searchable={false}\n                        clearable={false}\n                        style={{height: \"42px\", fontSize: \"16px\"}}\n                        onChange={items => setSelectedProject(items[0] ? items[0] : \"\")}\n                    />\n                </div>\n            </div>\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"name\" className=\"col-sm-2 col-form-label\">recipe name</label>\n                <div className=\"col-sm-10\">\n                    <input \n                        name=\"name\"\n                        value={name}\n                        onChange={event => setName(event.target.value)}\n                        type=\"text\" \n                        className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.name})} \n                        placeholder=\"name\" \n                    />\n                    {\n                        (errors.name && <div className=\"text-danger\">{errors.name}</div>)\n                    }\n                    \n                </div>\n            </div>\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"amount\" className=\"col-sm-2 col-form-label\">amount</label>\n                <div className=\"col-sm-10\">\n                    <input \n                        name=\"amount\"\n                        value={amount}\n                        onChange={event => setAmount(parseFloat(event.target.value))}\n                        type=\"number\" \n                        className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.amount})} \n                        placeholder=\"amount\" \n                        min=\"0.000\"\n                        step=\"0.001\"\n                    />\n                    {\n                        (errors.amount && <div className=\"text-danger\">{errors.amount}</div>)\n                    }\n                    \n                </div>\n            </div>\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"unit\" className=\"col-sm-2 col-form-label\">unit</label>\n                <div className=\"col-sm-10\">\n                    <Select\n                        options={units}\n                        values={[unit]}\n                        labelField=\"unit\"\n                        placeholder=\"unit\"\n                        valueField=\"unit\"\n                        searchable={false}\n                        clearable={false}\n                        style={{height: \"42px\", fontSize: \"16px\"}}\n                        className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.unit})} \n                        onChange={items => setUnit(items[0] ? {unit: items[0].unit} : \"\")}\n                    />\n                    {\n                        (errors.unit && <div className=\"text-danger\">{errors.unit}</div>)\n                    }\n                </div>\n            </div>\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"shelfLifeInDays\" className=\"col-sm-2 col-form-label\">shelf life (days)</label>\n                <div className=\"col-sm-10\">\n                    <input \n                        name=\"shelfLifeInDays\"\n                        value={shelfLifeInDays}\n                        onChange={event => setShelfLifeInDays(event.target.value)}\n                        type=\"number\" \n                        className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.shelfLifeInDays})} \n                        placeholder=\"shelf life (days)\" \n                        min=\"0\"\n                    />\n                    {\n                        (errors.shelfLifeInDays && <div className=\"text-danger\">{errors.shelfLifeInDays}</div>)\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RecipeCoreForm","import axios from 'axios'\nimport { useEffect, useRef, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min'\nimport { check } from '../../utils/securityUtils'\nimport VerifyPanel from '../UI/VerifyPanel'\nimport IngredientInputs from './IngredientInputs'\nimport RecipeCoreForm from './RecipeCoreForm'\n\nconst AddUpdateRecipe = props => {\n    const location = useLocation()\n    let history = useHistory()\n    \n    const auLabel = props.match.params.id ? \"Update\" : \"Add\"\n\n    const selectedLab = useSelector((state) => state.selectedLab)\n\n    const [ selectedProject, setSelectedProject ] = useState(\"\")\n    const [units, setUnits] = useState([])\n\n    const [originalRecipe, setOriginalRecipe] = useState(\"\")\n    \n    const [ name, setName ] = useState(\"\")\n    const [ amount, setAmount ] = useState(\"\")\n    const [ unit, setUnit ] = useState(\"\")\n    const [ shelfLifeInDays, setShelfLifeInDays ] = useState(\"\")\n    const [ ingredientsAreInValid, setIngredientsAreInValid ] = useState(true)\n\n    const [ chemicalIngredients, setChemicalIngredients ] = useState([{nr:0, amount:\"\"}])\n    const [ recipeIngredients, setRecipeIngredients ] = useState([{nr:0, amount:\"\"}])\n    const [justAddedRecipe, setJustAddedRecipe] = useState(\"\")\n    \n    const [ errors, setErrors ] = useState(\"\")\n\n    const prevSelectedLab = useRef();\n\n    const collectIngredientInputs = (ingredients, type) => {\n        return ingredients\n            .filter(ingredient => ingredient.ingredient && ingredient.ingredient.id && ingredient.unit && ingredient.amount)\n            .map(ingredient =>  ({\n                type: type,\n                ingredientId: ingredient.ingredient.id,\n                amount: parseInt(ingredient.amount),\n                unit: ingredient.unit\n            }))\n    }\n\n\n    const setStateForCreateOrUpdate = updadeId => {\n        if (updadeId) {\n            axios.get(`/api/lab-manager/recipe/${updadeId}`)\n                .then(result => setOriginalRecipe(result.data))\n                .catch(() => history.push(\"/recipes\"))\n        } else {\n            setSelectedProject(location.state.selectedProject)\n        }\n    }\n\n    useEffect(() => {\n        if (originalRecipe) {\n            setName(originalRecipe.name)\n            setAmount(originalRecipe.amount)\n            setUnit({unit: originalRecipe.unit})\n            setShelfLifeInDays(originalRecipe.shelfLifeInDays)\n            setChemicalIngredients(originalRecipe.chemicalIngredients.map((ing, index) => ({nr: index, ingredient: ing.ingredient, amount: ing.amount, unit: ing.unit})))\n            setRecipeIngredients(originalRecipe.recipeIngredients.map((ing, index) => ({nr: index, ingredient: ing.ingredient, amount: ing.amount, unit: ing.unit})))    \n            setSelectedProject(originalRecipe.project)\n        }\n    }, [originalRecipe])\n\n    useEffect(() => {\n        check()\n        setStateForCreateOrUpdate(props.match.params.id)\n        axios.get(\"/api/chem-item/unit\").then(result => setUnits(result.data.map(unit => {return {\"unit\": unit}})))\n    }, [])\n\n    useEffect(() => {\n        check()\n        if (chemicalIngredients.length === 1 && recipeIngredients.length === 1) {\n            return setIngredientsAreInValid(true)\n        }\n        if (!selectedProject || !selectedProject.id || !name || amount < 0.001 || !unit.unit || !shelfLifeInDays || parseInt(shelfLifeInDays) < 0)  {\n            return setIngredientsAreInValid(true)\n        }\n        const invalidChemRows = chemicalIngredients\n            .slice(0, chemicalIngredients.length - 1)\n            .filter(ingredient => !ingredient.ingredient || !ingredient.ingredient.id || !ingredient.unit || !ingredient.amount)\n        if (invalidChemRows.length > 0) {\n            setIngredientsAreInValid(true)\n            return\n        }\n        const invalidRecipeRows = recipeIngredients\n            .slice(0, recipeIngredients.length - 1)\n            .filter(ingredient => !ingredient.ingredient || !ingredient.ingredient.id || !ingredient.unit || !ingredient.amount)\n        setIngredientsAreInValid(invalidRecipeRows.length > 0)\n    }, [chemicalIngredients, recipeIngredients, selectedProject, name, amount, unit, shelfLifeInDays])\n\n    useEffect(() => {\n        if (chemicalIngredients.length === 0 || chemicalIngredients[chemicalIngredients.length - 1].ingredient) {\n            setChemicalIngredients(oldList => [...oldList, {nr: chemicalIngredients.length}])\n        }\n\n    }, [chemicalIngredients])\n\n    useEffect(() => {\n        if (recipeIngredients.length === 0 || recipeIngredients[recipeIngredients.length - 1].ingredient) {\n            setRecipeIngredients(oldList => [...oldList, {nr: recipeIngredients.length}])\n        }\n    }, [recipeIngredients])\n\n    useEffect(() => {\n        if (!selectedLab || (prevSelectedLab.current && prevSelectedLab.current.id !== selectedLab.id)) {\n            props.history.push(\"/recipes\")\n        }\n        prevSelectedLab.current = selectedLab\n    }, [selectedLab])\n\n    const getBacktrackObject = () =>  \n    ({\n        pathname:\"/recipes\", \n        state: {detail: {selectedProject: selectedProject}}\n    })\n\n    const sendRequest = async (recipeInput, originalRecipe) => {\n        if (originalRecipe) {\n            return axios.put(`/api/lab-manager/recipe/${originalRecipe.id}`, recipeInput)\n        } else {\n            return axios.post('/api/lab-manager/recipe', recipeInput)\n        }\n    }\n\n    const sendAndHandleRequest = async (recipeInput, originalRecipe) => {\n        await sendRequest(recipeInput, originalRecipe)\n            .then(result => setJustAddedRecipe(result.data))\n            .catch(error => setErrors(error.response.data))\n    }\n\n    const onSubmit = async (event) => {\n        check()\n        event.preventDefault()\n        const recipeInput = {\n            projectId: selectedProject.id,\n            name: name,\n            amount: amount,\n            unit: unit.unit,\n            shelfLifeInDays: parseInt(shelfLifeInDays),\n            ingredients: collectIngredientInputs(chemicalIngredients, \"CHEMICAL\").concat(collectIngredientInputs(recipeIngredients, \"RECIPE\"))\n        }\n        await sendAndHandleRequest(recipeInput, originalRecipe)\n    }\n\n    const createVerifyMessage = () => {\n        const oldName = originalRecipe ? `(${originalRecipe.name})` : \"\"\n        return `Recipe ${justAddedRecipe.name} ${oldName} was successfully ${originalRecipe ? \"updated\" : \"created\"} in project ${selectedProject.name} in lab ${selectedLab.name}`\n    }\n\n    const returnToDashboard = () => {\n        history.push(getBacktrackObject(justAddedRecipe))\n    }\n\n    const handleChemicalOnRemove = nr => {\n        setChemicalIngredients(chemicalIngredients.filter(chemicalIngredient => chemicalIngredient.nr !== nr))\n    }\n\n    const handleRecipeOnRemove = nr => {\n        setRecipeIngredients(recipeIngredients.filter(recipeIngredient => recipeIngredient.nr !== nr))\n    }\n    \n    const sumbitButton = <button type=\"submit\" className=\"btn btn-info mt-4\" disabled={ingredientsAreInValid}>{auLabel} Recipe</button>\n\n    return(\n        <div className=\"col-md-8 m-auto\">\n            <h1 className=\"display-4 text-center\">{auLabel} Recipe</h1>\n            <br/>\n            {\n                (errors.message && <h5 className=\"text-danger\">{errors.message}</h5>)\n            }\n            <form onSubmit={onSubmit}>\n                {sumbitButton}\n                <RecipeCoreForm \n                    isUpdate={originalRecipe}\n                    units={units}\n                    errors={errors}\n                    selectedProject={selectedProject} setSelectedProject={setSelectedProject}\n                    name={name} setName={setName}\n                    amount={amount} setAmount={setAmount}\n                    unit={unit} setUnit={setUnit}\n                    shelfLifeInDays={shelfLifeInDays} setShelfLifeInDays={setShelfLifeInDays}\n                />\n                {\n                    (errors.ingredients && <div className=\"text-danger\">{errors.ingredients}</div>)\n                }\n                {selectedProject &&\n                    <IngredientInputs \n                        projectId={selectedProject.id}\n                        chemicalIngredients={chemicalIngredients} \n                        setChemicalIngredients={setChemicalIngredients}\n                        recipeIngredients={recipeIngredients}\n                        setRecipeIngredients={setRecipeIngredients}\n                        units={units}\n                        handleChemicalOnRemove={handleChemicalOnRemove}\n                        handleRecipeOnRemove={handleRecipeOnRemove}\n                    />\n                }\n                {justAddedRecipe && \n                    <VerifyPanel \n                        onCancel={() => returnToDashboard()} \n                        veryfyMessage={createVerifyMessage()}\n                        buttonLabel=\"Ok\"\n                    />}\n                {sumbitButton}\n            </form>\n            <div style={{height: \"600px\", width: \"100%\", clear:\"both\"}}></div>\n        </div>\n    )\n}\n\nexport default AddUpdateRecipe","import { Table, Paper, TableContainer, TableHead, TableRow, TableCell, TableBody } from \"@mui/material\"\n\nconst IngredientMixtureTable = props => {\n    const { mixture, type } = props\n    const recipe = mixture.recipe\n    const ingredients = type === \"CHEM_ITEM\" ? recipe.chemicalIngredients : recipe.recipeIngredients\n    \n    const getMixtureRow = recipeIngredient => {\n        const recipeId = recipeIngredient.ingredient.id\n        const mixtureItem = mixture.mixtureItems.filter(mi => mi.recipe.id === recipeId)[0]\n        return ({\n            id: mixtureItem.id,\n            name: mixtureItem.recipe.name,\n            amount: recipeIngredient.amount / recipe.amount * mixture.amount,\n            unit: recipeIngredient.unit,\n            manufacturerName: \"\",\n            identifier: mixtureItem.id\n        })\n    }\n\n    const getChemItemRow = chemicalIngredient => {\n        const chemicalId = chemicalIngredient.ingredient.id\n        const chemItem = mixture.chemItems.filter(chemItem => chemItem.chemical.id === chemicalId)[0]\n        const chemical = chemItem.chemical\n        return ({\n            id: chemicalId,\n            name: chemical.shortName,\n            amount: chemicalIngredient.amount / recipe.amount * mixture.amount,\n            unit: chemicalIngredient.unit,\n            identifier: `${chemItem.batchNumber}-${chemItem.seqNumber}`,\n            manufacturerName: chemItem.manufacturer.name,\n        })\n    }\n\n    const getRow = ingredient => {\n        return type === \"CHEM_ITEM\" ? getChemItemRow(ingredient) : getMixtureRow(ingredient)\n    }\n\n    return (\n        <TableContainer component={Paper}>\n            <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell align=\"left\"><strong>ingredient name</strong></TableCell>\n                        <TableCell align=\"left\"><strong>amount</strong></TableCell>\n                        <TableCell align=\"left\"><strong>{type === \"CHEM_ITEM\" ? \"batch-seq\" : \"mixture id\"}</strong></TableCell>\n                        <TableCell align=\"left\" style={{opacity: type === \"CHEM_ITEM\" ? \"1.0\": \"0.0\"}}>\n                            <strong>manufacturer</strong>\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                {ingredients.map((ing) => {\n                    const ingredientRow = getRow(ing)\n                    return (<TableRow key={ingredientRow.id} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\n                        <TableCell>{ingredientRow.name}</TableCell>\n                        <TableCell>{ingredientRow.amount} {ingredientRow.unit}</TableCell>\n                        <TableCell>{ingredientRow.identifier}</TableCell>\n                        <TableCell align=\"left\">{ingredientRow.manufacturerName}</TableCell>\n                    </TableRow>)\n                })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}\n\nexport default IngredientMixtureTable","import { useState } from \"react\";\nimport useCollapse from \"react-collapsed\";\nimport DuButtons from \"../UI/DuButtons\";\nimport VerifyPanel from \"../UI/VerifyPanel\";\nimport IngredientMixtureTable from \"./IngredientMixtureTable\";\n\nconst MixtureCard = props => {\n\n    const mixture = props.mixture\n    const recipe = mixture.recipe\n\n    const [deletionConfirmation, setDeletionConfirmation] = useState(false)\n\n    const { getCollapseProps, getToggleProps } = useCollapse();\n\n    const getChemicalRow = chemicalIngredient => {\n        const chemicalId = chemicalIngredient.ingredient.id\n        const chemItem = mixture.chemItems.filter(chemItem => chemItem.chemical.id === chemicalId)[0]\n        const chemical = chemItem.chemical\n        return ({\n            id: chemicalId,\n            name: chemical.shortName,\n            amount: chemicalIngredient.amount / recipe.amount * mixture.amount,\n            unit: chemicalIngredient.unit,\n            manufacturerName: chemItem.manufacturer.name,\n            seqNumber: chemItem.seqNumber,\n            batchNumber: chemItem.batchNumber,\n            expirationDate: chemItem.expirationDate\n\n        })\n    }\n\n    const isExpired = mixture => {\n        const expDate = new Date(mixture.expirationDate)\n        let today = new Date().setHours(0,0,0,0)\n        return expDate < today   \n    }\n\n    return (\n        <div className={`container card card-body bg-light mb-3 ${isExpired(mixture) ? \"unavailable\" : \"\"}`} style={{paddingTop: \"5px\", paddingBottom: \"0px\", paddingRight: \"10px\", paddingLeft: \"10px\"}}>\n            <div className=\"header row\" {...getToggleProps()}>\n\n                <div className=\"col-1\">\n                    <i className=\"mx-small\">{mixture.id}</i>\n                </div>\n                <div className=\"col-3\">\n                    <h4 className=\"mx-auto\">{recipe.name}</h4>\n                </div>\n                <div className=\"col-2\">\n                    <h4 className=\"mx-auto\">{recipe.project.name}</h4>\n                </div>\n                <div className=\"col-sm-1\">\n                    <i>{mixture.amount} {recipe.unit}</i>\n                </div>\n                <div className=\"col-sm-2\">\n                    <i>{mixture.creationDate}</i><br/>\n                    <i>(by {mixture.creator.fullName})</i>\n                </div>\n                <div className=\"col-sm-1\">\n                    <i>{mixture.expirationDate}</i>\n                </div> \n                <div className=\"col-sm-2\">\n                    { props.isManager && \n                        <DuButtons \n                            updateDisabled={false}\n                            updateFormTo={`/update-mixture/${mixture.id}`}\n                            onDelete={() => setDeletionConfirmation(true)}\n                        /> \n                    }\n                </div>\n\n            </div>\n            <div {...getCollapseProps()}>\n                <div className=\"content\" style={{padding: \"10px\"}}>\n                   \n                    {(recipe.chemicalIngredients.length > 0  && \n                        <div style={{paddingBottom: \"10px\"}}>\n                            <i><strong>Chemical Ingredients</strong></i>\n                                <IngredientMixtureTable \n                                    mixture={mixture}\n                                    type=\"CHEM_ITEM\"\n                                />\n                        </div>\n                    )}\n                    {(recipe.recipeIngredients.length > 0  && \n                        <div style={{paddingBottom: \"10px\"}}>\n                            <i><strong>Mixture Ingredients</strong></i>\n                                <IngredientMixtureTable \n                                    mixture={mixture}\n                                    type=\"MIXTURE\"\n                                />\n                        </div>\n                    )}\n                </div>\n                {deletionConfirmation && \n                    <VerifyPanel \n                        onCancel={() => setDeletionConfirmation(false)} \n                        veryfyMessage={`Are you sure you want to delete \n                            mixture ${recipe.name} (${mixture.identifier}, ${mixture.amount} ${recipe.unit}, created on ${mixture.creationDate})?`}\n                        onSubmit={() => props.deleteMixture(mixture.id)}\n                        buttonLabel=\"Delete\"\n                    />\n                }\n            </div>\n\n        </div>\n    )\n}\n\nexport default MixtureCard","import React from 'react';\n\nexport default function MixtureHeader() {\n    return (\n        <div className=\"bg-white mb-2 row\" style={{padding: \"2px\"}}>\n            <div className=\"col-sm-1\">\n                <h4>id</h4>\n            </div>\n            <div className=\"col-3\">\n                <h4 className=\"mx-auto\">name</h4>\n            </div>\n            <div className=\"col-sm-2\">\n                <h4>project</h4>\n            </div>\n            <div className=\"col-1\">\n                <h4 className=\"mx-auto\">amount</h4>\n            </div>\n            <div className=\"col-sm-2\">\n                <h4>created</h4>\n            </div>\n            <div className=\"col-sm-1\">\n                <h4>expire</h4>\n            </div>\n            <div className=\"col-sm-2\" />\n        </div>\n    )\n}\n\n\n","import axios from \"axios\"\nimport { useEffect, useState } from \"react\"\nimport Select from \"react-dropdown-select\"\nimport { useSelector } from \"react-redux\"\nimport { check } from \"../../utils/securityUtils\"\nimport Pagination from \"../Pagination\"\nimport RedirectFormButton from \"../RedirectFormButton\"\nimport VerifyPanel from \"../UI/VerifyPanel\"\nimport MixtureCard from \"./MixtureCard\"\nimport MixtureHeader from \"./MixtureHeader\"\n\nconst MixtureDashboard = () => {\n    const PAGE_LIMIT = 10\n\n    const selectedLab = useSelector(state => state.selectedLab)\n    const user = useSelector((state) => state.security.user)\n\n    const [ mixtures, setMixtures ] = useState([])\n    const [ projects, setProjects ] = useState([])\n    \n    const [ selectedProject, setSelectedProject ] = useState(\"\")\n    const [onlyAvailable, setOnlyAvailable] = useState(true)\n    const [error, setError] = useState(\"\")\n    \n    const [totalItems, setTotalItems] = useState(1)\n    const [ page, setPage ] = useState(1)\n    const [ size, setSize ] = useState(PAGE_LIMIT)\n    \n    const queryString = () => {\n        let queryString = `?page=${page - 1}&size=${size}`\n        queryString = `${queryString}${selectedProject ? ('&projectId=' + selectedProject.id) : ''}`\n        queryString = `${queryString}${onlyAvailable ? '&available=true': ''}`\n        return queryString\n    }\n\n    const isManager =  (selectedLab.key) && selectedLab.labManagers.filter(manager => manager.username === user.username).length > 0\n\n    useEffect(() => {\n        if (selectedLab) {\n            setSelectedProject(\"\")\n            axios.get(`/api/logged-in/project/${selectedLab.key}`).then(result => setProjects(result.data))\n        } \n    }, [selectedLab])\n\n    useEffect(() => {\n        check()\n        if (selectedLab) {\n            axios.get(`/api/mixture/${selectedLab.key}${queryString()}`)\n                .then(result => {\n                    setMixtures(result.data.content)\n                    setTotalItems(result.data.totalItems)\n                    \n                })\n        }\n    }, [selectedLab, page, size, selectedProject, onlyAvailable])\n   \n\n    const deleteMixture = async mixtureId => {\n        try {\n            await axios.delete(`/api/mixture/${mixtureId}`)\n            setMixtures(originalList => originalList.filter(mixture => mixture.id !== mixtureId))\n        } catch (error) {\n            setError(error.response.data.message)\n        }\n        \n    }\n\n\n    const getMixtureTable = () => {\n        if (mixtures.length === 0) {\n            return <p className=\"lead\"><i>There is no mixture in the lab (according to the filter criteria)</i></p>\n        } else {\n            return (<div>\n                <MixtureHeader />\n                <hr />\n                {mixtures.map(mixture => \n                    <MixtureCard \n                        key={mixture.id} \n                        mixture={mixture}\n                        deleteMixture={deleteMixture}\n                        isManager={isManager}\n                    />\n                )}\n            </div>)\n        }\n    }\n\n    return (\n        <div className=\"container col-md-12\">\n            <div className=\"row\" style={{ position: \"relative\"}}>\n                <div style={{ position: \"absolute\", bottom: \"0\",left: \"0\"}}>\n                    <RedirectFormButton formRoute=\"/add-mixture\" buttonLabel=\"Add Mixture\"/>\n                </div>\n                <div className=\"text-center\">\n                    <h3 className=\"display-4\">Mixtures</h3>\n                    <p className=\"lead\">List the mixtures and eluents of {selectedLab.name}</p>\n                </div>\n            </div>\n            <br/>\n            <div className=\"w-300 px-4 py-0 d-flex flex-row\">\n                <div className=\"col-sm-4 d-flex py-2 align-items-center\">\n                    <div className=\"col-sm-4\">\n                        <Pagination \n                            totalRecords={totalItems}\n                            pageLimit={PAGE_LIMIT} \n                            pageNeighbours={1}\n                            onPageChanged={paginatioData => setPage(paginatioData.currentPage)}\n                        />\n                    </div>\n\n                    <div className=\"col-sm-8 pad-chckbx\" >\n                        <input\n                            type=\"checkbox\"\n                            checked={onlyAvailable}\n                            onChange={() => setOnlyAvailable(!onlyAvailable)}\n                        />\n                        <label className=\"pad-5\" >Only available</label>\n                        \n                    </div>\n\n                </div>\n                <div className=\"col-sm-8\">\n                    <Select\n                        options={projects}\n                        labelField=\"name\"\n                        valueField=\"name\"\n                        values={projects.filter(project => selectedProject && (project.id === selectedProject.id))}\n                        placeholder=\"project\"\n                        searchable={false}\n                        clearable={true}\n                        style={{height: \"42px\", fontSize: \"16px\"}}\n                        onChange={items => setSelectedProject(items[0] ? items[0] : \"\")}\n                    />\n                </div>\n            </div>\n            <hr />\n            {getMixtureTable()} \n            {error && \n                <VerifyPanel \n                    onCancel={() => setError(\"\")} \n                    veryfyMessage={error}\n                    buttonLabel=\"Ok\"\n                />}\n        </div>\n    )\n}\n\nexport default MixtureDashboard","import { TableCell, TableRow } from \"@mui/material\"\nimport axios from \"axios\"\nimport { useEffect, useState } from \"react\"\nimport Select from \"react-dropdown-select\"\nimport { useSelector } from \"react-redux\"\n\nconst ItemInputRow = props => {\n    const { ingredientRow, type, amountFactor, selectedItems, setSelectedItems, setSpacer, posFromLast, creationDate } = props\n    const ingredient = ingredientRow.ingredient\n    const height = posFromLast * 50\n\n    const isChemItems = (type === \"CHEM_ITEM\")\n\n    const selectedLab = useSelector(state => state.selectedLab)\n\n    const [ item, setItem ] = useState(selectedItems[ingredient.id])\n    const [ items, setItems ] = useState([])\n    const [ open, setOpen ] = useState(false)\n\n    const fetchChemItems = () => {\n        let query\n        if (creationDate) {\n            query = `/api/chem-item/${selectedLab.key}?chemicalId=${ingredient.id}&availableOn=${creationDate}&size=100`\n        } else {\n            query = `/api/chem-item/${selectedLab.key}?chemicalId=${ingredient.id}&opened=true&expired=false&consumed=false&size=100`\n        }\n        axios.get(query)\n                .then(result => {setItems(result.data.content.map(item => (\n                    {...item, label: `${item.manufacturer.name}, ${item.batchNumber}-${item.seqNumber} (opened on ${item.openingDate}, expires on ${item.expirationDate})`}\n                )))})\n    }\n\n    const fetchMixtures = () => {\n        let query\n        if (creationDate) {\n            query = `/api/mixture/${selectedLab.key}?recipeId=${ingredient.id}&availableOn=${creationDate}&size=100`\n        }\n        else {\n            query = `/api/mixture/${selectedLab.key}?recipeId=${ingredient.id}&available=false&size=100`\n        }\n        axios.get(query)\n                .then(result => {setItems(result.data.content.map(mixture => (\n                    {...mixture, label: `${mixture.id} (created on ${mixture.creationDate} by ${mixture.creator.fullName}, expires on ${mixture.creationDate})`}\n                )))})\n    }\n\n    useEffect(() => {\n        if (selectedItems.length == 0) {\n            setItem(\"\")\n        }\n    }, [selectedItems])\n\n    useEffect(() => {\n        if (item) {\n            const ingId = ingredient.id\n            const newItem = {}\n            newItem[ingId] = item\n            setSelectedItems({...selectedItems, ...newItem})\n        }\n\n    }, [item])\n\n    useEffect(() => {\n        if (selectedLab) {\n            if (isChemItems) {\n                fetchChemItems()   \n            } else {\n                fetchMixtures()\n            }\n        }\n        \n    }, [selectedLab, creationDate])\n\n    useEffect(() => {\n        if (open) {\n            const dropDownHeight = 15 + 30 * (items.length ? items.length : 1)\n            if (dropDownHeight > height)\n            setSpacer(dropDownHeight - height)\n        } else {\n            setSpacer(0)\n        }\n    }, [open])\n\n    return (\n        <TableRow key={ingredient.id} >\n            <TableCell>{isChemItems ? ingredient.shortName : ingredient.name}</TableCell>\n            <TableCell style={{width: \"500px\"}}>\n                <Select\n                    options={items}\n                    values={items.filter(i => item && (i.id === item.id))}\n                    onDropdownOpen={() => setOpen(true)}\n                    onDropdownClose={() => setOpen(false)}\n                    labelField=\"label\"\n                    valueField=\"id\"\n                    placeholder=\"item\"\n                    searchable={false}\n                    clearable={false}\n                    style={{height: \"30px\", width: \"500px\", fontSize: \"12px\", menuPortal: base => ({ ...base, zIndex: 9999 })}}\n                    onChange={items => setItem(items[0] ? items[0] : \"\")}\n                />\n            </TableCell>\n            <TableCell>{(amountFactor * (ingredientRow.amount)).toFixed(3)}</TableCell>\n            <TableCell align=\"left\"> {ingredientRow.unit}</TableCell>\n        </TableRow>\n    )\n\n}\n\nexport default ItemInputRow","import { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@mui/material\"\nimport { useState } from \"react\"\nimport ItemInputRow from \"./ItemInputRow\"\n\nconst ItemInputsInMixture = props => {\n    const { recipe, amount, ingredients, setSelectedItems, selectedItems, type, creationDate } = props \n    const [ spacer, setSpacer ] = useState(0)\n\n    const isChemItems = type === \"CHEM_ITEM\"\n\n    return (\n        \n        <div>\n            {ingredients && ingredients.length > 0 && ( \n                <div style={{paddingBottom: \"20px\"}}>\n                    <h3 className=\"display-8\">{isChemItems ? \"Chemical\" : \"Mixture\"} ingredients</h3>\n                    <TableContainer component={Paper}>\n                        <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\"><strong>ingredient name</strong></TableCell>\n                                    <TableCell align=\"left\"><strong>{isChemItems ? \"manufacturer, batch-seq\" : \"mixture id\"}</strong></TableCell>\n                                    <TableCell align=\"left\"><strong>amount</strong></TableCell>\n                                    <TableCell align=\"left\"><strong>unit</strong></TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {ingredients.map((chemicalIngredient, index) => \n                                    <ItemInputRow \n                                        key={chemicalIngredient.ingredient.id}\n                                        type={type}\n                                        amountFactor={amount / recipe.amount}\n                                        ingredientRow={chemicalIngredient} \n                                        setSelectedItems={setSelectedItems} \n                                        selectedItems={selectedItems}\n                                        posFromLast={ingredients.length - index - 1}\n                                        setSpacer={setSpacer}\n                                        creationDate={creationDate}\n                                    />\n\n                                )}\n                                <TableCell style={{height: `${spacer}px`}}/>\n                                \n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </div>)\n            }\n        </div>\n    )\n}\n\nexport default ItemInputsInMixture","import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useRef, useState } from \"react\"\nimport Select from \"react-dropdown-select\"\nimport { useSelector } from \"react-redux\"\nimport { check, checkIfManager } from \"../../../utils/securityUtils\"\nimport VerifyPanel from \"../../UI/VerifyPanel\"\nimport ItemInputsInMixture from \"./ItemInputsInMixture\"\n\nconst AddUpdateMixture = props => {\n    const mixtureId = props.match.params.id\n    \n    const selectedLab = useSelector(state => state.selectedLab)\n    const user = useSelector(state => state.security.user)\n\n    const [ projects, setProjects ] = useState([])\n    const [ recipes, setRecipes ] = useState([])\n    const [ originalMixture, setOriginalMixture ] = useState(\"\")\n\n    const [ selectedProject, setSelectedProject ] = useState(\"\")\n    const [ recipe, setRecipe ] = useState(\"\")\n    const [ amount, setAmount ] = useState(\"\")\n    const [ creationDate, setCreationDate ] = useState(\"\")\n    const [ chemItems, setChemItems ] = useState(\"\")\n    const [ mixtureItems, setMixtureItems ] = useState(\"\")\n    const [ changeCraetionDate, setChangeCraetionDate ] = useState()\n\n    const [ errors, setErrors ] = useState(\"\")\n    const isManager = checkIfManager(selectedLab, user)\n\n    const prevSelectedLab = useRef();\n\n    const [justAddedMixture, setJustAddedMixture] = useState(\"\")\n\n    useEffect(() => {\n        if (mixtureId) {\n            axios.get(`/api/mixture/${selectedLab.key}/${mixtureId}`)\n                .then(result => {setOriginalMixture(result.data)})\n                .catch(() => props.history.push(\"/mixtures\"))\n        }\n    }, [])\n\n    useEffect(() => {\n        if (originalMixture) {\n            setSelectedProject(originalMixture.recipe.project)\n            setRecipe(originalMixture.recipe)\n            setAmount(originalMixture.amount)\n            const initialChemItems = {}\n            originalMixture.chemItems.forEach(item => {\n                initialChemItems[item.chemical.id] = item\n            });\n            setChemItems(initialChemItems)\n            const initialMixtureItems = {}\n            originalMixture.mixtureItems.forEach(item => {\n                initialMixtureItems[item.recipe.id] = item\n            });\n            setMixtureItems(initialMixtureItems)\n        }\n\n    }, [originalMixture])\n\n    useEffect(() => {\n        check()\n        if (prevSelectedLab.current && prevSelectedLab.current.id !== selectedLab.id) {\n            props.history.push(\"/mixtures\")\n        }\n        if (selectedLab) {\n            axios.get(`/api/logged-in/project/${selectedLab.key}`).then(result => {setProjects(result.data)})\n        }\n        prevSelectedLab.current = selectedLab\n    }, [selectedLab])\n\n    useEffect(() => {\n        if (selectedProject) {\n            axios.get(`/api/logged-in/recipe/${selectedProject.id}`).then(result => {setRecipes(result.data)})\n        } else {\n            setRecipes([])\n        }\n    }, [selectedProject])\n\n   const changeRecipe = recipe => {\n        if (!mixtureId) {\n            setRecipe(recipe)\n            setMixtureItems([])\n            setChemItems([])\n        }\n    }\n\n    const sendRequest = async (mixtureInput) => {\n        if (originalMixture) {\n            return axios.put(`/api/mixture/${originalMixture.id}`, mixtureInput)\n        } else {\n            return axios.post(`/api/mixture`, mixtureInput)\n        }\n    }\n\n    const onSubmit = async (event) => {\n        check()\n        event.preventDefault()\n        const mixtureInput = {\n            recipeId: recipe.id,\n            creationDate: (new Date()).toISOString().split('T')[0],\n            username: user.username,\n            amount: amount,\n            chemItemIds: Object.values(chemItems).map(chemItem => chemItem.id),\n            mixtureItemIds: Object.values(mixtureItems).map(mixtureItem => mixtureItem.id)\n        }\n        await sendRequest(mixtureInput)\n                .then(result => setJustAddedMixture(result.data))\n                .catch(error => setErrors(error.response.data))\n       \n    }\n\n    const createVerifyMessage = () => {\n        return `Mixture ${justAddedMixture.recipe.name} was successfully ${originalMixture ? \"updated\" : \"created\"} in project ${selectedProject.name} in lab ${selectedLab.name}`\n    }\n\n    const getCreatedDateInputContent = () => {\n        if (!isManager) {\n            return\n        }\n        return (\n            <div>\n                <div className=\"form-group row mb-3 align-items-center\">\n                    <label htmlFor=\"changeCraetionDate\" className=\"col-sm-2 col-form-label\">change creation date</label>\n                    <div className=\"col-sm-10\">\n                        <input\n                            type=\"checkbox\"\n                            checked={changeCraetionDate}\n                            onChange={() => setChangeCraetionDate(!changeCraetionDate)}\n                        />\n                    </div>\n                </div>\n                {changeCraetionDate && (<div className=\"form-group row mb-3\">\n                    <label htmlFor=\"amount\" className=\"col-sm-2 col-form-label\">creation date</label>\n                    <div className=\"col-sm-10\">\n                        <input \n                            name=\"creationDate\" \n                            value={creationDate}\n                            onChange={event => setCreationDate(event.target.value)}\n                            type=\"date\" \n                            className=\"form-control form-control-lg \" \n                        />\n                        {\n                            (errors.creationDate && <div className=\"text-danger\">{errors.creationDate}</div>)\n                        } \n                    </div>\n                </div>)}\n            </div>\n        )\n    }\n    \n    const auLabel = mixtureId ? \"Update\" : \"Add\"\n    const sumbitButton = <button type=\"submit\" className=\"btn btn-info mt-4\" disabled={false}>{auLabel} Mixture</button>\n    \n    return (\n        <div className=\"col-md-8 m-auto\">\n            <h1 className=\"display-4 text-center\">{auLabel} Mixture</h1>\n            <br/>\n            {\n                (errors.message && <h5 className=\"text-danger\">{errors.message}</h5>)\n            }\n            <form onSubmit={onSubmit}>\n                {sumbitButton}\n                <div className=\"form-group row mb-3\">\n                    <label htmlFor=\"project\" className=\"col-sm-2 col-form-label\">project</label>\n                        <div className=\"col-sm-10\">\n                            <Select\n                                disabled={mixtureId}\n                                options={projects}\n                                values={projects.filter(project => selectedProject && (project.id === selectedProject.id))}\n                                labelField=\"name\"\n                                valueField=\"name\"\n                                placeholder=\"project\"\n                                searchable={false}\n                                clearable={false}\n                                style={{height: \"42px\", fontSize: \"16px\"}}\n                                onChange={items => setSelectedProject(items[0] ? items[0] : \"\")}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"form-group row mb-3\">\n                        <label htmlFor=\"project\" className=\"col-sm-2 col-form-label\">recipe</label>\n                        <div className=\"col-sm-10\">\n                            <Select\n                                disabled={mixtureId}\n                                options={recipes}\n                                values={recipes.filter(recipeFromList => recipe && (recipeFromList.id === recipe.id))}\n                                labelField=\"name\"\n                                valueField=\"id\"\n                                placeholder=\"recipe\"\n                                searchable={false}\n                                clearable={false}\n                                style={{height: \"42px\", fontSize: \"16px\"}}\n                                onChange={items => changeRecipe(items[0] ? items[0] : \"\")}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"form-group row mb-3\">\n                        <label htmlFor=\"amount\" className=\"col-sm-2 col-form-label\">amount</label>\n                        <div className=\"col-sm-10\">\n                            <input \n                                name=\"amount\"\n                                value={amount}\n                                onChange={event => setAmount(parseFloat(event.target.value))}\n                                type=\"number\" \n                                className={classNames(\"form-control form-control-lg\", {\"is-invalid\": errors.amount})} \n                                placeholder=\"amount\" \n                                min=\"0.000\"\n                                step=\"0.001\"\n                            />\n                            {\n                                (errors.amount && <div className=\"text-danger\">{errors.amount}</div>)\n                            } \n                        </div>\n                    </div>\n                    {getCreatedDateInputContent()}\n                    <ItemInputsInMixture\n                        type=\"CHEM_ITEM\" \n                        recipe={recipe}\n                        ingredients={recipe.chemicalIngredients}\n                        amount={amount}\n                        setSelectedItems={setChemItems}\n                        selectedItems={chemItems}\n                        creationDate={changeCraetionDate && creationDate}\n                    />\n                    <ItemInputsInMixture\n                        type=\"MIXTURE_ITEM\" \n                        recipe={recipe}\n                        ingredients={recipe.recipeIngredients}\n                        amount={amount}\n                        setSelectedItems={setMixtureItems}\n                        selectedItems={mixtureItems}\n                        creationDate={changeCraetionDate && creationDate}\n                    />\n            </form>\n            <div style={{height: \"600px\", width: \"100%\", clear:\"both\"}}></div>\n            {justAddedMixture && \n                <VerifyPanel \n                    onCancel={() => props.history.push('/mixtures')} \n                    veryfyMessage={createVerifyMessage()}\n                    buttonLabel=\"Ok\"\n                />}\n        </div>\n    )\n}\n\nexport default AddUpdateMixture","import axios from \"axios\"\nimport { useEffect, useState } from \"react\"\nimport Select from \"react-dropdown-select\"\nimport { useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router-dom\"\nimport { checkIfAdmin } from \"../../../utils/securityUtils\"\n\nconst ChemItemUpdateInputFields = props => {\n    const { selectedLab, updateSetters, updateValues } = props\n    const { arrivedBy, openingDate, openedBy, consumptionDate, consumedBy } = updateValues\n    const { setArrivedBy, setOpeningDate, setOpenedBy, setConsumptionDate, setConsumedBy} = updateSetters\n\n    const [ users, setUsers ] = useState([])\n\n    useEffect(() => {\n        if (selectedLab) {\n            axios.get(`/api/logged-in/user?labKey=${selectedLab.key}`).then(result => {setUsers(result.data)})\n        }\n    }, [selectedLab])\n\n    useEffect(() => {\n        if (!openedBy) {\n            setOpeningDate(\"\")\n            setConsumedBy(\"\")\n        }\n    }, [openedBy])\n\n    useEffect(() => {\n        if (!openedBy) {\n            setConsumptionDate(\"\")\n        }\n    }, [consumedBy])\n\n    const getOpeningDateInput = () => {\n        if (!openedBy) {\n            return\n        }\n        return (\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"openingDate\" className=\"col-sm-4 col-form-label\">Opening date</label>\n                <div className=\"col-sm-8\">\n                    <input \n                        name=\"openingDate\" \n                        value={openingDate}\n                        onChange={event => setOpeningDate(event.target.value)}\n                        type=\"date\" \n                        className=\"form-control form-control-lg \" \n                        />\n                </div>\n            </div> )\n    }\n\n    const getConsumtionDateInput = () => {\n        if (!consumedBy) {\n            return\n        }\n        return (\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"consumptionDate\" className=\"col-sm-4 col-form-label\">Consumtion date</label>\n                <div className=\"col-sm-8\">\n                    <input \n                        name=\"consumptionDate\" \n                        value={consumptionDate}\n                        onChange={event => setConsumptionDate(event.target.value)}\n                        type=\"date\" \n                        className=\"form-control form-control-lg \" \n                        />\n                </div>\n            </div> )\n    }\n\n    const getConsumedByInput = () => {\n        if (!openedBy) {\n            return\n        }\n        return (\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"consumedBy\" className=\"col-sm-4 col-form-label\">consumed by</label>\n                <div className=\"col-sm-8\">\n                    <Select\n                        options={users}\n                        values={ consumedBy ? [ consumedBy ] : []}\n                        labelField=\"fullName\"\n                        valueField=\"id\"\n                        placeholder=\"consumed by\"\n                        searchable={false}\n                        clearable={true}\n                        style={{height: \"42px\", fontSize: \"16px\"}}\n                        onChange={items => setConsumedBy(items[0] ? items[0] : \"\")}\n                    />\n                </div>\n            </div>)\n    }\n\n    return(\n        <div>\n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"arrivedBy\" className=\"col-sm-4 col-form-label\">arrived by</label>\n                <div className=\"col-sm-8\">\n                    <Select\n                        options={users}\n                        values={ arrivedBy ? [ arrivedBy ] : []}\n                        labelField=\"fullName\"\n                        valueField=\"id\"\n                        placeholder=\"arrived by\"\n                        searchable={false}\n                        clearable={false}\n                        style={{height: \"42px\", fontSize: \"16px\"}}\n                        onChange={items => setArrivedBy(items[0] ? items[0] : \"\")}\n                    />\n                </div>\n            </div>\n            \n            <div className=\"form-group row mb-3\">\n                <label htmlFor=\"openedBy\" className=\"col-sm-4 col-form-label\">opened by</label>\n                <div className=\"col-sm-8\">\n                    <Select\n                        options={users}\n                        values={ openedBy ? [ openedBy ] : []}\n                        labelField=\"fullName\"\n                        valueField=\"id\"\n                        placeholder=\"opened by\"\n                        searchable={false}\n                        clearable={true}\n                        style={{height: \"42px\", fontSize: \"16px\"}}\n                        onChange={items => setOpenedBy(items[0] ? items[0] : \"\")}\n                    />\n                </div>\n            </div>\n            {getOpeningDateInput()}\n            {getConsumedByInput()}\n            {getConsumtionDateInput()}\n        </div>\n    )\n}\n\nexport default ChemItemUpdateInputFields","import React, { useEffect, useState } from 'react'\nimport { check } from '../../../utils/securityUtils'\nimport axios from 'axios'\nimport { useHistory } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport ChemItemCoreInputFields from './ChemItemCoreInputFields'\nimport Select from 'react-dropdown-select'\nimport ChemItemUpdateInputFields from './ChemItemUpdateInputFields'\nimport VerifyPanel from '../../UI/VerifyPanel'\n\nconst UpdateChemItem = props => {\n    const chemItemId = props.match.params.id\n\n    const [ chemItem, setChemItem ] = useState()\n    \n    const [ manufacturerId, setManufacturerId ] = useState(\"\") \n    const [ unit, setUnit ] = useState(\"\") \n    const [ quantity, setQuantity ] = useState(0) \n    const [ batchNumber, setBatchNumber ] = useState(\"\") \n    const [ expirationDateBeforeOpened, setExpirationDateBeforeOpened ] = useState(\"\") \n    \n    const [ arrivalDate, setArrivalDate ] = useState(\"\") \n    const [ arrivedBy, setArrivedBy ] = useState(\"\") \n    const [ openingDate, setOpeningDate ] = useState(\"\") \n    const [ openedBy, setOpenedBy ] = useState(\"\") \n    const [ consumptionDate, setConsumptionDate ] = useState(\"\") \n    const [ consumedBy, setConsumedBy ] = useState(\"\") \n\n    const [updatedChemItem, setUpdatedChemItem] = useState(\"\")\n    \n    const [ errors, setErrors ] = useState(\"\") \n\n    const selectedLab = useSelector(state => state.selectedLab)\n    const history = useHistory()\n    \n    useEffect(() => {\n        if (selectedLab) {\n            axios.get(`/api/chem-item/${selectedLab.key}/${chemItemId}`).then(result => {setChemItem(result.data)})   \n        }\n    }, [])\n\n    useEffect(() => {\n        if (chemItem) {\n            setManufacturerId(chemItem.manufacturer.id)\n            setUnit(chemItem.unit)\n            setQuantity(chemItem.quantity)\n            setBatchNumber(chemItem.batchNumber)\n            setExpirationDateBeforeOpened(chemItem.expirationDateBeforeOpened)\n            \n            setArrivalDate(chemItem.arrivalDate)\n            setArrivedBy(chemItem.arrivedBy)\n            setOpeningDate(chemItem.openingDate)\n            setOpenedBy(chemItem.openedBy)\n            setConsumptionDate(chemItem.consumptionDate)\n            setConsumedBy(chemItem.consumedBy)\n        }\n    \n    }, [chemItem])\n\n    useEffect(() => {\n        check()\n    })\n\n    const createAcknowledgeMessage = () => {\n        return `Chemical (chem item) '${updatedChemItem.chemical.shortName}' \n        (${updatedChemItem.manufacturer.name}, ${updatedChemItem.batchNumber}/${updatedChemItem.seqNumber}) \n        was successfully ${true ? \"updated\" : \"created\"} in lab ${selectedLab.name}`\n    }\n\n    const onSubmit = async e => {\n        check()\n        e.preventDefault()\n        const updatedChemItem = {\n            labKey: chemItem.lab.key,\n            chemicalShortName: chemItem.chemical.shortName,\n            manufacturerId: manufacturerId,\n            unit: unit,\n            amount: 1,\n            quantity: quantity,\n            batchNumber: batchNumber,\n            expirationDateBeforeOpened: expirationDateBeforeOpened,\n            arrivalDate: arrivalDate,\n            arrivedByUsername: arrivedBy.username,\n            openingDate: openingDate,\n            openedByUsername: openedBy ? openedBy.username  : \"\",\n            consumptionDate: consumptionDate,\n            consumedByUsername: consumedBy ? consumedBy.username : \"\"\n        }\n        await axios.put(`/api/chem-item/${chemItem.id}`, updatedChemItem)\n            .then(result =>  setUpdatedChemItem(result.data))\n            .catch(error => setErrors(error.response.data))   \n    }\n\n    const setters = {\n        setManufacturerId: setManufacturerId,\n        setBatchNumber: setBatchNumber,\n        setQuantity: setQuantity,\n        setUnit: setUnit,\n        setExpirationDateBeforeOpened: setExpirationDateBeforeOpened,\n        setArrivalDate: setArrivalDate\n    }\n\n    const updateSetters = {\n        setArrivedBy: setArrivedBy,\n        setOpeningDate: setOpeningDate,\n        setOpenedBy: setOpenedBy,\n        setConsumptionDate: setConsumptionDate,\n        setConsumedBy: setConsumedBy,\n    }\n\n    const values = {\n        unit: chemItem && {unit: chemItem.unit},\n        manufacturer: chemItem && chemItem.manufacturer,\n        batchNumber: batchNumber,\n        quantity: quantity,\n        expirationDateBeforeOpened: expirationDateBeforeOpened,\n        arrivalDate: arrivalDate,\n    }\n\n    const updateValues = {\n        arrivedBy: arrivedBy,\n        openingDate: openingDate,\n        openedBy: openedBy,\n        consumptionDate: consumptionDate,\n        consumedBy: consumedBy\n    }\n\n\n    return (\n        <div className=\"col-md-8 m-auto\">\n            <h5 className=\"display-4 text-center\">{`Update registered chemical (chem item) in ${selectedLab.name}`}</h5>\n            <hr />\n            <br/>   \n            {\n                (errors.message && <h5 className=\"text-danger\">{errors.message}</h5>)\n            }\n            <form onSubmit={onSubmit}>\n                <ChemItemCoreInputFields\n                    chemItem={chemItem}\n                    selectedLab={selectedLab}\n                    setters={setters}\n                    values={values}\n                    history={history}\n                />\n                <ChemItemUpdateInputFields\n                    selectedLab={selectedLab}\n                    updateSetters={updateSetters}\n                    updateValues={updateValues}\n                />\n\n                <button type=\"submit\" className=\"btn btn-primary btn-block mt-4\">Update</button>\n            </form>\n            {updatedChemItem && \n                <VerifyPanel \n                    onCancel={() => history.push('/chem-items')} \n                    veryfyMessage={createAcknowledgeMessage()}\n                    buttonLabel=\"Ok\"\n                />}\n        </div>\n    )\n    \n}\n\nexport default UpdateChemItem\n","import './App.css';\nimport Header from './components/layout/Header';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport AddChemItem from './components/chemitem/addUpdate/AddChemItem';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport Landing from './components/Landing';\nimport AddUser from './components/user/AddUser';\nimport Login from './components/login/Login';\nimport { refreshState } from './utils/securityUtils';\nimport SecuredRoute from './utils/SecuredRoute'\nimport UserDashboard from './components/user/UserDashboard';\nimport ChangePassword from './components/user/ChangePassword';\nimport UpdateUser from './components/user/UpdateUser';\nimport ManufacturerDashboard from './components/manufacturer/ManufacturerDashboard';\nimport AddManufacturer from './components/manufacturer/AddManufacturer';\nimport UpdateManufacturer from './components/manufacturer/UpdateManufacturer';\nimport ChemicalDashboard from './components/chemical/ChemicalDashboard';\nimport AddChemical from './components/chemical/AddChemical';\nimport UpdateChemical from './components/chemical/UpdateChemical';\nimport LabDashboard from './components/lab/LabDashboard';\nimport AddLab from './components/lab/AddLab';\nimport UpdateLab from './components/lab/UpdateLab';\nimport CategoryDashboard from './components/category/CategoryDashboard';\nimport AddCategory from './components/category/AddCategory';\nimport UpdateCategory from './components/category/UpdateCategory';\nimport ChemItemDashboard from './components/chemitem/ChemItemDashboard';\nimport UserManual from './components/layout/UserManual';\nimport ProjectDashboard from './components/project/ProjectDashboard';\nimport AddProject from './components/project/AddProject';\nimport UpdateProject from './components/project/UpdateProject';\nimport RecipeDashboard from './components/recipe/RecipeDashboard';\nimport AddUpdateRecipe from './components/recipe/AddUpdateRecipe';\nimport MixtureDashboard from './components/mixture/MixtureDashboard';\nimport AddUpdateMixture from './components/mixture/add/AddUpdateMixture';\nimport UpdateChemItem from './components/chemitem/addUpdate/UpdateChemItem';\n\n\nrefreshState()\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className=\"App\">\n          <Header />\n          <Route exact path=\"/\" component={Landing} />\n          <Route exact path=\"/login\" component={Login} />\n\n          <Route exact path=\"/user-manual\" component={UserManual} />\n          \n          <Switch>\n            \n\n            <SecuredRoute exact path=\"/change-password\" component={ChangePassword} />\n\n            <SecuredRoute exact path=\"/users\" component={UserDashboard} />\n            <SecuredRoute exact path=\"/add-user\" component={AddUser} />\n            <SecuredRoute exact path=\"/update-user/:id\" component={UpdateUser} />\n\n            <SecuredRoute exact path=\"/manufacturers\" component={ManufacturerDashboard} />\n            <SecuredRoute exact path=\"/add-manufacturer\" component={AddManufacturer} />\n            <SecuredRoute exact path=\"/update-manufacturer/:id\" component={UpdateManufacturer} />\n\n            <SecuredRoute exact path=\"/labs\" component={LabDashboard} />\n            <SecuredRoute exact path=\"/add-lab\" component={AddLab} />\n            <SecuredRoute exact path=\"/update-lab/:id\" component={UpdateLab} />\n\n            <SecuredRoute exact path=\"/chemicals\" component={ChemicalDashboard} />\n            <SecuredRoute exact path=\"/add-chemical\" component={AddChemical} />\n            <SecuredRoute exact path=\"/update-chemical/:id\" component={UpdateChemical} />\n\n            <SecuredRoute exact path=\"/categories\" component={CategoryDashboard} />\n            <SecuredRoute exact path=\"/add-category\" component={AddCategory} />\n            <SecuredRoute exact path=\"/update-category/:id\" component={UpdateCategory} />\n\n            <SecuredRoute exact path=\"/projects\" component={ProjectDashboard} />\n            <SecuredRoute exact path=\"/add-project\" component={AddProject} />\n            <SecuredRoute exact path=\"/update-project/:id\" component={UpdateProject} />\n\n            <SecuredRoute exact path=\"/recipes\" component={RecipeDashboard} />\n            <SecuredRoute exact path=\"/add-recipe\" component={AddUpdateRecipe} />\n            <SecuredRoute exact path=\"/update-recipe/:id\" component={AddUpdateRecipe} />\n\n            <SecuredRoute exact path=\"/chem-items\" component={ChemItemDashboard} />\n            <SecuredRoute exact path=\"/add-chem-item\" component={AddChemItem} />\n            <SecuredRoute exact path=\"/update-chem-item/:id\" component={UpdateChemItem} />\n\n            <SecuredRoute exact path=\"/mixtures\" component={MixtureDashboard} />\n            <SecuredRoute exact path=\"/add-mixture\" component={AddUpdateMixture} />\n            <SecuredRoute exact path=\"/update-mixture/:id\" component={AddUpdateMixture} />\n            \n            \n          </Switch>\n\n        </div>\n      </Router>\n    </Provider>\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__1mfF6\",\"modal\":\"Modal_modal__4DXUe\",\"slide-down\":\"Modal_slide-down__W3MdX\"};"],"sourceRoot":""}